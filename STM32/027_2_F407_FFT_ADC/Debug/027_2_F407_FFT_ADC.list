
027_2_F407_FFT_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003324  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013468  080034ac  080034ac  000134ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016914  08016914  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  08016914  08016914  00026914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801691c  0801691c  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801691c  0801691c  0002691c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016920  08016920  00026920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08016924  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030070  2**0
                  CONTENTS
 10 .bss          0000c098  20000070  20000070  00030070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000c108  2000c108  00030070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000794d  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018e0  00000000  00000000  000379ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000610  00000000  00000000  000392d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005a0  00000000  00000000  000398e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000208d0  00000000  00000000  00039e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000781d  00000000  00000000  0005a750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb5ae  00000000  00000000  00061f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c0  00000000  00000000  0012d51b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000015bc  00000000  00000000  0012d5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003378  00000000  00000000  0012eb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003494 	.word	0x08003494

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003494 	.word	0x08003494

080001c8 <arm_bitreversal_32>:
 80001c8:	1c4b      	adds	r3, r1, #1
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	bf98      	it	ls
 80001ce:	4770      	bxls	lr
 80001d0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001d4:	1c91      	adds	r1, r2, #2
 80001d6:	089b      	lsrs	r3, r3, #2

080001d8 <arm_bitreversal_32_0>:
 80001d8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001dc:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e0:	880a      	ldrh	r2, [r1, #0]
 80001e2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001e6:	4480      	add	r8, r0
 80001e8:	4481      	add	r9, r0
 80001ea:	4402      	add	r2, r0
 80001ec:	4484      	add	ip, r0
 80001ee:	f8d9 7000 	ldr.w	r7, [r9]
 80001f2:	f8d8 6000 	ldr.w	r6, [r8]
 80001f6:	6815      	ldr	r5, [r2, #0]
 80001f8:	f8dc 4000 	ldr.w	r4, [ip]
 80001fc:	f8c9 6000 	str.w	r6, [r9]
 8000200:	f8c8 7000 	str.w	r7, [r8]
 8000204:	f8cc 5000 	str.w	r5, [ip]
 8000208:	6014      	str	r4, [r2, #0]
 800020a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800020e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000212:	6855      	ldr	r5, [r2, #4]
 8000214:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000218:	f8c9 6004 	str.w	r6, [r9, #4]
 800021c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000220:	f8cc 5004 	str.w	r5, [ip, #4]
 8000224:	6054      	str	r4, [r2, #4]
 8000226:	3108      	adds	r1, #8
 8000228:	3b01      	subs	r3, #1
 800022a:	d1d5      	bne.n	80001d8 <arm_bitreversal_32_0>
 800022c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000230:	4770      	bx	lr

08000232 <arm_bitreversal_16>:
 8000232:	1c4b      	adds	r3, r1, #1
 8000234:	2b01      	cmp	r3, #1
 8000236:	bf98      	it	ls
 8000238:	4770      	bxls	lr
 800023a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800023e:	1c91      	adds	r1, r2, #2
 8000240:	089b      	lsrs	r3, r3, #2

08000242 <arm_bitreversal_16_0>:
 8000242:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000246:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800024a:	880a      	ldrh	r2, [r1, #0]
 800024c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000250:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000254:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000258:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800025c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000260:	f8d9 7000 	ldr.w	r7, [r9]
 8000264:	f8d8 6000 	ldr.w	r6, [r8]
 8000268:	6815      	ldr	r5, [r2, #0]
 800026a:	f8dc 4000 	ldr.w	r4, [ip]
 800026e:	f8c9 6000 	str.w	r6, [r9]
 8000272:	f8c8 7000 	str.w	r7, [r8]
 8000276:	f8cc 5000 	str.w	r5, [ip]
 800027a:	6014      	str	r4, [r2, #0]
 800027c:	3108      	adds	r1, #8
 800027e:	3b01      	subs	r3, #1
 8000280:	d1df      	bne.n	8000242 <arm_bitreversal_16_0>
 8000282:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b974 	b.w	8000588 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002bc:	9d08      	ldr	r5, [sp, #32]
 80002be:	4604      	mov	r4, r0
 80002c0:	468e      	mov	lr, r1
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d14d      	bne.n	8000362 <__udivmoddi4+0xaa>
 80002c6:	428a      	cmp	r2, r1
 80002c8:	4694      	mov	ip, r2
 80002ca:	d969      	bls.n	80003a0 <__udivmoddi4+0xe8>
 80002cc:	fab2 f282 	clz	r2, r2
 80002d0:	b152      	cbz	r2, 80002e8 <__udivmoddi4+0x30>
 80002d2:	fa01 f302 	lsl.w	r3, r1, r2
 80002d6:	f1c2 0120 	rsb	r1, r2, #32
 80002da:	fa20 f101 	lsr.w	r1, r0, r1
 80002de:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e2:	ea41 0e03 	orr.w	lr, r1, r3
 80002e6:	4094      	lsls	r4, r2
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	0c21      	lsrs	r1, r4, #16
 80002ee:	fbbe f6f8 	udiv	r6, lr, r8
 80002f2:	fa1f f78c 	uxth.w	r7, ip
 80002f6:	fb08 e316 	mls	r3, r8, r6, lr
 80002fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fe:	fb06 f107 	mul.w	r1, r6, r7
 8000302:	4299      	cmp	r1, r3
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x64>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 30ff 	add.w	r0, r6, #4294967295
 800030e:	f080 811f 	bcs.w	8000550 <__udivmoddi4+0x298>
 8000312:	4299      	cmp	r1, r3
 8000314:	f240 811c 	bls.w	8000550 <__udivmoddi4+0x298>
 8000318:	3e02      	subs	r6, #2
 800031a:	4463      	add	r3, ip
 800031c:	1a5b      	subs	r3, r3, r1
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb3 f0f8 	udiv	r0, r3, r8
 8000324:	fb08 3310 	mls	r3, r8, r0, r3
 8000328:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032c:	fb00 f707 	mul.w	r7, r0, r7
 8000330:	42a7      	cmp	r7, r4
 8000332:	d90a      	bls.n	800034a <__udivmoddi4+0x92>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 33ff 	add.w	r3, r0, #4294967295
 800033c:	f080 810a 	bcs.w	8000554 <__udivmoddi4+0x29c>
 8000340:	42a7      	cmp	r7, r4
 8000342:	f240 8107 	bls.w	8000554 <__udivmoddi4+0x29c>
 8000346:	4464      	add	r4, ip
 8000348:	3802      	subs	r0, #2
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	1be4      	subs	r4, r4, r7
 8000350:	2600      	movs	r6, #0
 8000352:	b11d      	cbz	r5, 800035c <__udivmoddi4+0xa4>
 8000354:	40d4      	lsrs	r4, r2
 8000356:	2300      	movs	r3, #0
 8000358:	e9c5 4300 	strd	r4, r3, [r5]
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d909      	bls.n	800037a <__udivmoddi4+0xc2>
 8000366:	2d00      	cmp	r5, #0
 8000368:	f000 80ef 	beq.w	800054a <__udivmoddi4+0x292>
 800036c:	2600      	movs	r6, #0
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	4630      	mov	r0, r6
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	fab3 f683 	clz	r6, r3
 800037e:	2e00      	cmp	r6, #0
 8000380:	d14a      	bne.n	8000418 <__udivmoddi4+0x160>
 8000382:	428b      	cmp	r3, r1
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xd4>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80f9 	bhi.w	800057e <__udivmoddi4+0x2c6>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb61 0303 	sbc.w	r3, r1, r3
 8000392:	2001      	movs	r0, #1
 8000394:	469e      	mov	lr, r3
 8000396:	2d00      	cmp	r5, #0
 8000398:	d0e0      	beq.n	800035c <__udivmoddi4+0xa4>
 800039a:	e9c5 4e00 	strd	r4, lr, [r5]
 800039e:	e7dd      	b.n	800035c <__udivmoddi4+0xa4>
 80003a0:	b902      	cbnz	r2, 80003a4 <__udivmoddi4+0xec>
 80003a2:	deff      	udf	#255	; 0xff
 80003a4:	fab2 f282 	clz	r2, r2
 80003a8:	2a00      	cmp	r2, #0
 80003aa:	f040 8092 	bne.w	80004d2 <__udivmoddi4+0x21a>
 80003ae:	eba1 010c 	sub.w	r1, r1, ip
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2601      	movs	r6, #1
 80003bc:	0c20      	lsrs	r0, r4, #16
 80003be:	fbb1 f3f7 	udiv	r3, r1, r7
 80003c2:	fb07 1113 	mls	r1, r7, r3, r1
 80003c6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ca:	fb0e f003 	mul.w	r0, lr, r3
 80003ce:	4288      	cmp	r0, r1
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x12c>
 80003d2:	eb1c 0101 	adds.w	r1, ip, r1
 80003d6:	f103 38ff 	add.w	r8, r3, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x12a>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2c0>
 80003e2:	4643      	mov	r3, r8
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ec:	fb07 1110 	mls	r1, r7, r0, r1
 80003f0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x156>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 31ff 	add.w	r1, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x154>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2ca>
 800040c:	4608      	mov	r0, r1
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000416:	e79c      	b.n	8000352 <__udivmoddi4+0x9a>
 8000418:	f1c6 0720 	rsb	r7, r6, #32
 800041c:	40b3      	lsls	r3, r6
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa20 f407 	lsr.w	r4, r0, r7
 800042a:	fa01 f306 	lsl.w	r3, r1, r6
 800042e:	431c      	orrs	r4, r3
 8000430:	40f9      	lsrs	r1, r7
 8000432:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000436:	fa00 f306 	lsl.w	r3, r0, r6
 800043a:	fbb1 f8f9 	udiv	r8, r1, r9
 800043e:	0c20      	lsrs	r0, r4, #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fb09 1118 	mls	r1, r9, r8, r1
 8000448:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044c:	fb08 f00e 	mul.w	r0, r8, lr
 8000450:	4288      	cmp	r0, r1
 8000452:	fa02 f206 	lsl.w	r2, r2, r6
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b8>
 8000458:	eb1c 0101 	adds.w	r1, ip, r1
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2bc>
 8000464:	4288      	cmp	r0, r1
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2bc>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4461      	add	r1, ip
 8000470:	1a09      	subs	r1, r1, r0
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb1 f0f9 	udiv	r0, r1, r9
 8000478:	fb09 1110 	mls	r1, r9, r0, r1
 800047c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000480:	fb00 fe0e 	mul.w	lr, r0, lr
 8000484:	458e      	cmp	lr, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1e2>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2b4>
 8000492:	458e      	cmp	lr, r1
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2b4>
 8000496:	3802      	subs	r0, #2
 8000498:	4461      	add	r1, ip
 800049a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049e:	fba0 9402 	umull	r9, r4, r0, r2
 80004a2:	eba1 010e 	sub.w	r1, r1, lr
 80004a6:	42a1      	cmp	r1, r4
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46a6      	mov	lr, r4
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x2a4>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x2a0>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x212>
 80004b2:	ebb3 0208 	subs.w	r2, r3, r8
 80004b6:	eb61 010e 	sbc.w	r1, r1, lr
 80004ba:	fa01 f707 	lsl.w	r7, r1, r7
 80004be:	fa22 f306 	lsr.w	r3, r2, r6
 80004c2:	40f1      	lsrs	r1, r6
 80004c4:	431f      	orrs	r7, r3
 80004c6:	e9c5 7100 	strd	r7, r1, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	40d8      	lsrs	r0, r3
 80004d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004dc:	fa21 f303 	lsr.w	r3, r1, r3
 80004e0:	4091      	lsls	r1, r2
 80004e2:	4301      	orrs	r1, r0
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f0:	fb07 3610 	mls	r6, r7, r0, r3
 80004f4:	0c0b      	lsrs	r3, r1, #16
 80004f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004fa:	fb00 f60e 	mul.w	r6, r0, lr
 80004fe:	429e      	cmp	r6, r3
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x260>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b8>
 8000510:	429e      	cmp	r6, r3
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b8>
 8000514:	3802      	subs	r0, #2
 8000516:	4463      	add	r3, ip
 8000518:	1b9b      	subs	r3, r3, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000520:	fb07 3316 	mls	r3, r7, r6, r3
 8000524:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000528:	fb06 f30e 	mul.w	r3, r6, lr
 800052c:	428b      	cmp	r3, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x28a>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2b0>
 800053a:	428b      	cmp	r3, r1
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2b0>
 800053e:	3e02      	subs	r6, #2
 8000540:	4461      	add	r1, ip
 8000542:	1ac9      	subs	r1, r1, r3
 8000544:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0x104>
 800054a:	462e      	mov	r6, r5
 800054c:	4628      	mov	r0, r5
 800054e:	e705      	b.n	800035c <__udivmoddi4+0xa4>
 8000550:	4606      	mov	r6, r0
 8000552:	e6e3      	b.n	800031c <__udivmoddi4+0x64>
 8000554:	4618      	mov	r0, r3
 8000556:	e6f8      	b.n	800034a <__udivmoddi4+0x92>
 8000558:	454b      	cmp	r3, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f8>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000564:	3801      	subs	r0, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f8>
 8000568:	4646      	mov	r6, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x28a>
 800056c:	4620      	mov	r0, r4
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1e2>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x260>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b8>
 8000578:	3b02      	subs	r3, #2
 800057a:	4461      	add	r1, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x12c>
 800057e:	4630      	mov	r0, r6
 8000580:	e709      	b.n	8000396 <__udivmoddi4+0xde>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x156>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Read_ADC>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Read_ADC()
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
		  HAL_ADC_Start(&hadc1);
 8000590:	480e      	ldr	r0, [pc, #56]	; (80005cc <Read_ADC+0x40>)
 8000592:	f000 fb65 	bl	8000c60 <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc1,100000) == HAL_OK)
 8000596:	490e      	ldr	r1, [pc, #56]	; (80005d0 <Read_ADC+0x44>)
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <Read_ADC+0x40>)
 800059a:	f000 fc66 	bl	8000e6a <HAL_ADC_PollForConversion>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d10d      	bne.n	80005c0 <Read_ADC+0x34>
		  fft_in[i] = HAL_ADC_GetValue(&hadc1);
 80005a4:	4809      	ldr	r0, [pc, #36]	; (80005cc <Read_ADC+0x40>)
 80005a6:	f000 fceb 	bl	8000f80 <HAL_ADC_GetValue>
 80005aa:	ee07 0a90 	vmov	s15, r0
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <Read_ADC+0x48>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005b6:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <Read_ADC+0x4c>)
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	edc3 7a00 	vstr	s15, [r3]
		  HAL_ADC_Stop(&hadc1);
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <Read_ADC+0x40>)
 80005c2:	f000 fc1f 	bl	8000e04 <HAL_ADC_Stop>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000090 	.word	0x20000090
 80005d0:	000186a0 	.word	0x000186a0
 80005d4:	2000c0f0 	.word	0x2000c0f0
 80005d8:	200000d8 	.word	0x200000d8

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fa63 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f8a1 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f95f 	bl	80008ac <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ee:	f000 f907 	bl	8000800 <MX_ADC1_Init>

    /* USER CODE BEGIN 3 */



	  for(i=0; i<4096; i++)
 80005f2:	4b42      	ldr	r3, [pc, #264]	; (80006fc <main+0x120>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	e009      	b.n	800060e <main+0x32>
	  {
		  Read_ADC();
 80005fa:	f7ff ffc7 	bl	800058c <Read_ADC>
		  HAL_Delay(1);
 80005fe:	2001      	movs	r0, #1
 8000600:	f000 fac6 	bl	8000b90 <HAL_Delay>
	  for(i=0; i<4096; i++)
 8000604:	4b3d      	ldr	r3, [pc, #244]	; (80006fc <main+0x120>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	4a3c      	ldr	r2, [pc, #240]	; (80006fc <main+0x120>)
 800060c:	6013      	str	r3, [r2, #0]
 800060e:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <main+0x120>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000616:	d3f0      	bcc.n	80005fa <main+0x1e>
	  // f_step = (float32_t)3.38/1000000 / (float32_t)FFT_SIZE; //100 hz ile örneklenen bir sinyal için fft_in dizisine girdi olarak sağlıyoruz bizim 4096 karakterimiz varsa
	  	  	  	  	  	  	  	  	  	  	  	  	//stepimiz 100/4095 den 0.0244 olur buda absolute değerlerimizi yani mag değerlerimizi her bir frekans aralığı
	  	  	  	  	  	  	  	  	  	  	  	  	//bu aralık ile artıyor demektir yani arayin ilk elemanı 0.024 olur ikincisi 0.048 gibi


	  arm_rfft_fast_init_f32(&rfft_f32, FFT_SIZE);  //bu fonksiyonda fft init ayarlarımızı yapıyoruz
 8000618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061c:	4838      	ldr	r0, [pc, #224]	; (8000700 <main+0x124>)
 800061e:	f001 fe29 	bl	8002274 <arm_rfft_fast_init_f32>
	  	  	  	  	  	  	  	  	  	  	  	    //burada cmsis kütüphanemizin için tanımladığımız değişkenimizi ve dizimizin boyutunu tanımlıyoruz

	  arm_rfft_fast_f32(&rfft_f32, fft_in, fft_out, 0);	//Bu fonksiyonda ise fft alıyor time domaindeki değerleri frekans domaine dönüştürüyor.
 8000622:	2300      	movs	r3, #0
 8000624:	4a37      	ldr	r2, [pc, #220]	; (8000704 <main+0x128>)
 8000626:	4938      	ldr	r1, [pc, #224]	; (8000708 <main+0x12c>)
 8000628:	4835      	ldr	r0, [pc, #212]	; (8000700 <main+0x124>)
 800062a:	f001 fea7 	bl	800237c <arm_rfft_fast_f32>
	   	   	   	   	   	   	   	   	   	   	   	   	   	//sondaki sıfır tanımlaması tersi demek time domaindeki bir
	  												    // frekansı domeninde bir sinyale çevirmek istiyorsanız sıfır kullanmalıyız.

	  arm_cmplx_mag_f32(fft_out, fft_out_abs, FFT_SIZE / 2);  //absolute değerini yani karelerinin karekökünü alıyor
 800062e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000632:	4936      	ldr	r1, [pc, #216]	; (800070c <main+0x130>)
 8000634:	4833      	ldr	r0, [pc, #204]	; (8000704 <main+0x128>)
 8000636:	f002 fb0f 	bl	8002c58 <arm_cmplx_mag_f32>
	  												  //sinyalimiz power density yani güç yoğunluğunu alıyor


	  fft_out_abs_norm[0] = fft_out_abs[0] / FFT_SIZE;
 800063a:	4b34      	ldr	r3, [pc, #208]	; (800070c <main+0x130>)
 800063c:	ed93 7a00 	vldr	s14, [r3]
 8000640:	eddf 6a33 	vldr	s13, [pc, #204]	; 8000710 <main+0x134>
 8000644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000648:	4b32      	ldr	r3, [pc, #200]	; (8000714 <main+0x138>)
 800064a:	edc3 7a00 	vstr	s15, [r3]
	  for (i = 1; i < FFT_SIZE; i++)
 800064e:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <main+0x120>)
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	e018      	b.n	8000688 <main+0xac>
	  		{
	  			fft_out_abs_norm[i] = (2.0f * fft_out_abs[i]) / (float32_t)FFT_SIZE; //Verimizi normalize etme işlemi buda fft değerimizi 2 ile çarpıp fft_size a bölmek
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <main+0x120>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a2c      	ldr	r2, [pc, #176]	; (800070c <main+0x130>)
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	edd3 7a00 	vldr	s15, [r3]
 8000664:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <main+0x120>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8000710 <main+0x134>
 8000670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000674:	4a27      	ldr	r2, [pc, #156]	; (8000714 <main+0x138>)
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	4413      	add	r3, r2
 800067a:	edc3 7a00 	vstr	s15, [r3]
	  for (i = 1; i < FFT_SIZE; i++)
 800067e:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <main+0x120>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a1d      	ldr	r2, [pc, #116]	; (80006fc <main+0x120>)
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <main+0x120>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000690:	d3e1      	bcc.n	8000656 <main+0x7a>
	  		}

	  fft_out_abs_norm[0]=0;//0. indisi sıfıra çekiyor
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <main+0x138>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	601a      	str	r2, [r3, #0]

	  arm_max_f32(fft_out_abs_norm, FFT_SIZE, &max_value, &max_index);	//aray içerisinden max değerini veriyor.Bunun önemi bize en yüksek genlikli maximum değeri veriyor.
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <main+0x13c>)
 800069c:	4a1f      	ldr	r2, [pc, #124]	; (800071c <main+0x140>)
 800069e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a2:	481c      	ldr	r0, [pc, #112]	; (8000714 <main+0x138>)
 80006a4:	f001 fd7e 	bl	80021a4 <arm_max_f32>
	    	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	//Bu değerin hangi indis olduğunu veriyor bu indiside f_step ile çarparsak bize hangi sinyalin daha ağırlıklı	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //olduğunu veriyor
	  frequency = max_index * f_step;	//max index ile step'i çarptığımız zamanda bize frekans değerinini verir.
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <main+0x13c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	ee07 3a90 	vmov	s15, r3
 80006b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <main+0x144>)
 80006b6:	edd3 7a00 	vldr	s15, [r3]
 80006ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <main+0x148>)
 80006c0:	edc3 7a00 	vstr	s15, [r3]

	  for(int j=0; j<FFT_SIZE; j++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	e00f      	b.n	80006ea <main+0x10e>
	  {
		  adc_value1=fft_out_abs_norm[j];
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <main+0x138>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	4413      	add	r3, r2
 80006d2:	edd3 7a00 	vldr	s15, [r3]
 80006d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006da:	ee17 3a90 	vmov	r3, s15
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <main+0x14c>)
 80006e2:	801a      	strh	r2, [r3, #0]
	  for(int j=0; j<FFT_SIZE; j++)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3301      	adds	r3, #1
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006f0:	dbeb      	blt.n	80006ca <main+0xee>
		 // HAL_Delay(5);
	  }

	  HAL_Delay(50);
 80006f2:	2032      	movs	r0, #50	; 0x32
 80006f4:	f000 fa4c 	bl	8000b90 <HAL_Delay>
	  for(i=0; i<4096; i++)
 80006f8:	e77b      	b.n	80005f2 <main+0x16>
 80006fa:	bf00      	nop
 80006fc:	2000c0f0 	.word	0x2000c0f0
 8000700:	2000c0d8 	.word	0x2000c0d8
 8000704:	200040d8 	.word	0x200040d8
 8000708:	200000d8 	.word	0x200000d8
 800070c:	200080d8 	.word	0x200080d8
 8000710:	45800000 	.word	0x45800000
 8000714:	2000a0d8 	.word	0x2000a0d8
 8000718:	2000c0fc 	.word	0x2000c0fc
 800071c:	2000c0f8 	.word	0x2000c0f8
 8000720:	2000c0f4 	.word	0x2000c0f4
 8000724:	2000c100 	.word	0x2000c100
 8000728:	2000008c 	.word	0x2000008c

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	; 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fe80 	bl	8003440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	4a27      	ldr	r2, [pc, #156]	; (80007f8 <SystemClock_Config+0xcc>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	; 0x40
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b22      	ldr	r3, [pc, #136]	; (80007fc <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a21      	ldr	r2, [pc, #132]	; (80007fc <SystemClock_Config+0xd0>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000788:	2301      	movs	r3, #1
 800078a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800079c:	2308      	movs	r3, #8
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007aa:	2307      	movs	r3, #7
 80007ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f892 	bl	80018dc <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007be:	f000 f89d 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2302      	movs	r3, #2
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2105      	movs	r1, #5
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 faf3 	bl	8001dcc <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007ec:	f000 f886 	bl	80008fc <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3750      	adds	r7, #80	; 0x50
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_ADC1_Init+0xa0>)
 8000814:	4a23      	ldr	r2, [pc, #140]	; (80008a4 <MX_ADC1_Init+0xa4>)
 8000816:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <MX_ADC1_Init+0xa0>)
 800081a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800081e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_ADC1_Init+0xa0>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_ADC1_Init+0xa0>)
 8000828:	2201      	movs	r2, #1
 800082a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_ADC1_Init+0xa0>)
 800082e:	2200      	movs	r2, #0
 8000830:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_ADC1_Init+0xa0>)
 8000834:	2201      	movs	r2, #1
 8000836:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_ADC1_Init+0xa0>)
 800083c:	2201      	movs	r2, #1
 800083e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_ADC1_Init+0xa0>)
 8000842:	2200      	movs	r2, #0
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_ADC1_Init+0xa0>)
 8000848:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <MX_ADC1_Init+0xa8>)
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_ADC1_Init+0xa0>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_ADC1_Init+0xa0>)
 8000854:	2201      	movs	r2, #1
 8000856:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_ADC1_Init+0xa0>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_ADC1_Init+0xa0>)
 8000862:	2201      	movs	r2, #1
 8000864:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <MX_ADC1_Init+0xa0>)
 8000868:	f000 f9b6 	bl	8000bd8 <HAL_ADC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8000872:	f000 f843 	bl	80008fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800087e:	2303      	movs	r3, #3
 8000880:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	; (80008a0 <MX_ADC1_Init+0xa0>)
 8000888:	f000 fb88 	bl	8000f9c <HAL_ADC_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000892:	f000 f833 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000090 	.word	0x20000090
 80008a4:	40012000 	.word	0x40012000
 80008a8:	0f000001 	.word	0x0f000001

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_GPIO_Init+0x4c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <MX_GPIO_Init+0x4c>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <MX_GPIO_Init+0x4c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_GPIO_Init+0x4c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <MX_GPIO_Init+0x4c>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_GPIO_Init+0x4c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <HAL_MspInit+0x4c>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_MspInit+0x4c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000946:	2007      	movs	r0, #7
 8000948:	f000 fdf8 	bl	800153c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_ADC_MspInit+0x7c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d127      	bne.n	80009ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <HAL_ADC_MspInit+0x80>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <HAL_ADC_MspInit+0x80>)
 8000984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <HAL_ADC_MspInit+0x80>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <HAL_ADC_MspInit+0x80>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <HAL_ADC_MspInit+0x80>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <HAL_ADC_MspInit+0x80>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b2:	2301      	movs	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b6:	2303      	movs	r3, #3
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <HAL_ADC_MspInit+0x84>)
 80009c6:	f000 fded 	bl	80015a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40012000 	.word	0x40012000
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler+0x4>

080009f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler+0x4>

080009fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f890 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a5e:	490e      	ldr	r1, [pc, #56]	; (8000a98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a74:	4c0b      	ldr	r4, [pc, #44]	; (8000aa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a82:	f7ff ffd7 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f002 fcb7 	bl	80033f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8a:	f7ff fda7 	bl	80005dc <main>
  bx  lr    
 8000a8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a9c:	08016924 	.word	0x08016924
  ldr r2, =_sbss
 8000aa0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aa4:	2000c108 	.word	0x2000c108

08000aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <HAL_Init+0x40>)
 8000ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_Init+0x40>)
 8000ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_Init+0x40>)
 8000ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 fd31 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f000 f808 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae0:	f7ff ff12 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023c00 	.word	0x40023c00

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x54>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x58>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fd3b 	bl	800158a <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00e      	b.n	8000b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d80a      	bhi.n	8000b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f000 fd11 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <HAL_InitTick+0x5c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	2000c104 	.word	0x2000c104

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	2000c104 	.word	0x2000c104

08000b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff ffee 	bl	8000b78 <HAL_GetTick>
 8000b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba8:	d005      	beq.n	8000bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_Delay+0x44>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb6:	bf00      	nop
 8000bb8:	f7ff ffde 	bl	8000b78 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d8f7      	bhi.n	8000bb8 <HAL_Delay+0x28>
  {
  }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e033      	b.n	8000c56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d109      	bne.n	8000c0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff feae 	bl	8000958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d118      	bne.n	8000c48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c1e:	f023 0302 	bic.w	r3, r3, #2
 8000c22:	f043 0202 	orr.w	r2, r3, #2
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 fad8 	bl	80011e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f023 0303 	bic.w	r3, r3, #3
 8000c3e:	f043 0201 	orr.w	r2, r3, #1
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	641a      	str	r2, [r3, #64]	; 0x40
 8000c46:	e001      	b.n	8000c4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d101      	bne.n	8000c7a <HAL_ADC_Start+0x1a>
 8000c76:	2302      	movs	r3, #2
 8000c78:	e0b2      	b.n	8000de0 <HAL_ADC_Start+0x180>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d018      	beq.n	8000cc2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f042 0201 	orr.w	r2, r2, #1
 8000c9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ca0:	4b52      	ldr	r3, [pc, #328]	; (8000dec <HAL_ADC_Start+0x18c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a52      	ldr	r2, [pc, #328]	; (8000df0 <HAL_ADC_Start+0x190>)
 8000ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8000caa:	0c9a      	lsrs	r2, r3, #18
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000cb4:	e002      	b.n	8000cbc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f9      	bne.n	8000cb6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d17a      	bne.n	8000dc6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cd8:	f023 0301 	bic.w	r3, r3, #1
 8000cdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d007      	beq.n	8000d02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d0e:	d106      	bne.n	8000d1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d14:	f023 0206 	bic.w	r2, r3, #6
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	645a      	str	r2, [r3, #68]	; 0x44
 8000d1c:	e002      	b.n	8000d24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d2c:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <HAL_ADC_Start+0x194>)
 8000d2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d38:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 031f 	and.w	r3, r3, #31
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d12a      	bne.n	8000d9c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a2b      	ldr	r2, [pc, #172]	; (8000df8 <HAL_ADC_Start+0x198>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d015      	beq.n	8000d7c <HAL_ADC_Start+0x11c>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a29      	ldr	r2, [pc, #164]	; (8000dfc <HAL_ADC_Start+0x19c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d105      	bne.n	8000d66 <HAL_ADC_Start+0x106>
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <HAL_ADC_Start+0x194>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 031f 	and.w	r3, r3, #31
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00a      	beq.n	8000d7c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a25      	ldr	r2, [pc, #148]	; (8000e00 <HAL_ADC_Start+0x1a0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d136      	bne.n	8000dde <HAL_ADC_Start+0x17e>
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_ADC_Start+0x194>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0310 	and.w	r3, r3, #16
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d130      	bne.n	8000dde <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d129      	bne.n	8000dde <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	e020      	b.n	8000dde <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <HAL_ADC_Start+0x198>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d11b      	bne.n	8000dde <HAL_ADC_Start+0x17e>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d114      	bne.n	8000dde <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	e00b      	b.n	8000dde <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f043 0210 	orr.w	r2, r3, #16
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f043 0201 	orr.w	r2, r3, #1
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	20000000 	.word	0x20000000
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	40012300 	.word	0x40012300
 8000df8:	40012000 	.word	0x40012000
 8000dfc:	40012100 	.word	0x40012100
 8000e00:	40012200 	.word	0x40012200

08000e04 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d101      	bne.n	8000e1a <HAL_ADC_Stop+0x16>
 8000e16:	2302      	movs	r3, #2
 8000e18:	e021      	b.n	8000e5e <HAL_ADC_Stop+0x5a>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 0201 	bic.w	r2, r2, #1
 8000e30:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d109      	bne.n	8000e54 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	f043 0201 	orr.w	r2, r3, #1
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e86:	d113      	bne.n	8000eb0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e96:	d10b      	bne.n	8000eb0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f043 0220 	orr.w	r2, r3, #32
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e063      	b.n	8000f78 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000eb0:	f7ff fe62 	bl	8000b78 <HAL_GetTick>
 8000eb4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000eb6:	e021      	b.n	8000efc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebe:	d01d      	beq.n	8000efc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d007      	beq.n	8000ed6 <HAL_ADC_PollForConversion+0x6c>
 8000ec6:	f7ff fe57 	bl	8000b78 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d212      	bcs.n	8000efc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d00b      	beq.n	8000efc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f043 0204 	orr.w	r2, r3, #4
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e03d      	b.n	8000f78 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d1d6      	bne.n	8000eb8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f06f 0212 	mvn.w	r2, #18
 8000f12:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d123      	bne.n	8000f76 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d11f      	bne.n	8000f76 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d006      	beq.n	8000f52 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d111      	bne.n	8000f76 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d105      	bne.n	8000f76 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f043 0201 	orr.w	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1c>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e105      	b.n	80011c4 <HAL_ADC_ConfigChannel+0x228>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b09      	cmp	r3, #9
 8000fc6:	d925      	bls.n	8001014 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68d9      	ldr	r1, [r3, #12]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	3b1e      	subs	r3, #30
 8000fde:	2207      	movs	r2, #7
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43da      	mvns	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	400a      	ands	r2, r1
 8000fec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68d9      	ldr	r1, [r3, #12]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	4603      	mov	r3, r0
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4403      	add	r3, r0
 8001006:	3b1e      	subs	r3, #30
 8001008:	409a      	lsls	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	430a      	orrs	r2, r1
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	e022      	b.n	800105a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6919      	ldr	r1, [r3, #16]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	b29b      	uxth	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	2207      	movs	r2, #7
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	400a      	ands	r2, r1
 8001036:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6919      	ldr	r1, [r3, #16]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	b29b      	uxth	r3, r3
 8001048:	4618      	mov	r0, r3
 800104a:	4603      	mov	r3, r0
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4403      	add	r3, r0
 8001050:	409a      	lsls	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b06      	cmp	r3, #6
 8001060:	d824      	bhi.n	80010ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	3b05      	subs	r3, #5
 8001074:	221f      	movs	r2, #31
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	400a      	ands	r2, r1
 8001082:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4618      	mov	r0, r3
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	3b05      	subs	r3, #5
 800109e:	fa00 f203 	lsl.w	r2, r0, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	430a      	orrs	r2, r1
 80010a8:	635a      	str	r2, [r3, #52]	; 0x34
 80010aa:	e04c      	b.n	8001146 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b0c      	cmp	r3, #12
 80010b2:	d824      	bhi.n	80010fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	3b23      	subs	r3, #35	; 0x23
 80010c6:	221f      	movs	r2, #31
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43da      	mvns	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	400a      	ands	r2, r1
 80010d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	3b23      	subs	r3, #35	; 0x23
 80010f0:	fa00 f203 	lsl.w	r2, r0, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30
 80010fc:	e023      	b.n	8001146 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	3b41      	subs	r3, #65	; 0x41
 8001110:	221f      	movs	r2, #31
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	400a      	ands	r2, r1
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	3b41      	subs	r3, #65	; 0x41
 800113a:	fa00 f203 	lsl.w	r2, r0, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <HAL_ADC_ConfigChannel+0x234>)
 8001148:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <HAL_ADC_ConfigChannel+0x238>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d109      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x1cc>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b12      	cmp	r3, #18
 800115a:	d105      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_ADC_ConfigChannel+0x238>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d123      	bne.n	80011ba <HAL_ADC_ConfigChannel+0x21e>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b10      	cmp	r3, #16
 8001178:	d003      	beq.n	8001182 <HAL_ADC_ConfigChannel+0x1e6>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b11      	cmp	r3, #17
 8001180:	d11b      	bne.n	80011ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b10      	cmp	r3, #16
 8001194:	d111      	bne.n	80011ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <HAL_ADC_ConfigChannel+0x23c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a10      	ldr	r2, [pc, #64]	; (80011dc <HAL_ADC_ConfigChannel+0x240>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	0c9a      	lsrs	r2, r3, #18
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011ac:	e002      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f9      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40012300 	.word	0x40012300
 80011d4:	40012000 	.word	0x40012000
 80011d8:	20000000 	.word	0x20000000
 80011dc:	431bde83 	.word	0x431bde83

080011e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e8:	4b79      	ldr	r3, [pc, #484]	; (80013d0 <ADC_Init+0x1f0>)
 80011ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	431a      	orrs	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6859      	ldr	r1, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	021a      	lsls	r2, r3, #8
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6859      	ldr	r1, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800125a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6899      	ldr	r1, [r3, #8]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	4a58      	ldr	r2, [pc, #352]	; (80013d4 <ADC_Init+0x1f4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d022      	beq.n	80012be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001286:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6899      	ldr	r1, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6899      	ldr	r1, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	e00f      	b.n	80012de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0202 	bic.w	r2, r2, #2
 80012ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6899      	ldr	r1, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7e1b      	ldrb	r3, [r3, #24]
 80012f8:	005a      	lsls	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d01b      	beq.n	8001344 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800131a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800132a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6859      	ldr	r1, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	3b01      	subs	r3, #1
 8001338:	035a      	lsls	r2, r3, #13
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	e007      	b.n	8001354 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001352:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	3b01      	subs	r3, #1
 8001370:	051a      	lsls	r2, r3, #20
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001388:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6899      	ldr	r1, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001396:	025a      	lsls	r2, r3, #9
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6899      	ldr	r1, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	029a      	lsls	r2, r3, #10
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	609a      	str	r2, [r3, #8]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40012300 	.word	0x40012300
 80013d4:	0f000001 	.word	0x0f000001

080013d8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <NVIC_SetPriorityGrouping+0x44>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <NVIC_SetPriorityGrouping+0x44>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <NVIC_GetPriorityGrouping+0x18>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	f003 0307 	and.w	r3, r3, #7
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	da0b      	bge.n	8001468 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <NVIC_SetPriority+0x4c>)
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	3b04      	subs	r3, #4
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001466:	e009      	b.n	800147c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4907      	ldr	r1, [pc, #28]	; (800148c <NVIC_SetPriority+0x50>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00
 800148c:	e000e100 	.word	0xe000e100

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff8e 	bl	800143c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff47 	bl	80013d8 <NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff5c 	bl	8001420 <NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff8e 	bl	8001490 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffb0 	bl	80014f8 <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	e16b      	b.n	8001898 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c0:	2201      	movs	r2, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	429a      	cmp	r2, r3
 80015da:	f040 815a 	bne.w	8001892 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d005      	beq.n	80015f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d130      	bne.n	8001658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f003 0201 	and.w	r2, r3, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b03      	cmp	r3, #3
 8001662:	d017      	beq.n	8001694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d123      	bne.n	80016e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	69b9      	ldr	r1, [r7, #24]
 80016e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0203 	and.w	r2, r3, #3
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80b4 	beq.w	8001892 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b60      	ldr	r3, [pc, #384]	; (80018b0 <HAL_GPIO_Init+0x30c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a5f      	ldr	r2, [pc, #380]	; (80018b0 <HAL_GPIO_Init+0x30c>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b5d      	ldr	r3, [pc, #372]	; (80018b0 <HAL_GPIO_Init+0x30c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001746:	4a5b      	ldr	r2, [pc, #364]	; (80018b4 <HAL_GPIO_Init+0x310>)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	220f      	movs	r2, #15
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a52      	ldr	r2, [pc, #328]	; (80018b8 <HAL_GPIO_Init+0x314>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d02b      	beq.n	80017ca <HAL_GPIO_Init+0x226>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a51      	ldr	r2, [pc, #324]	; (80018bc <HAL_GPIO_Init+0x318>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d025      	beq.n	80017c6 <HAL_GPIO_Init+0x222>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a50      	ldr	r2, [pc, #320]	; (80018c0 <HAL_GPIO_Init+0x31c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d01f      	beq.n	80017c2 <HAL_GPIO_Init+0x21e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4f      	ldr	r2, [pc, #316]	; (80018c4 <HAL_GPIO_Init+0x320>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d019      	beq.n	80017be <HAL_GPIO_Init+0x21a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4e      	ldr	r2, [pc, #312]	; (80018c8 <HAL_GPIO_Init+0x324>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0x216>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4d      	ldr	r2, [pc, #308]	; (80018cc <HAL_GPIO_Init+0x328>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d00d      	beq.n	80017b6 <HAL_GPIO_Init+0x212>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4c      	ldr	r2, [pc, #304]	; (80018d0 <HAL_GPIO_Init+0x32c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d007      	beq.n	80017b2 <HAL_GPIO_Init+0x20e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4b      	ldr	r2, [pc, #300]	; (80018d4 <HAL_GPIO_Init+0x330>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d101      	bne.n	80017ae <HAL_GPIO_Init+0x20a>
 80017aa:	2307      	movs	r3, #7
 80017ac:	e00e      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017ae:	2308      	movs	r3, #8
 80017b0:	e00c      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017b2:	2306      	movs	r3, #6
 80017b4:	e00a      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017b6:	2305      	movs	r3, #5
 80017b8:	e008      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017ba:	2304      	movs	r3, #4
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017be:	2303      	movs	r3, #3
 80017c0:	e004      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e002      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017ca:	2300      	movs	r3, #0
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	f002 0203 	and.w	r2, r2, #3
 80017d2:	0092      	lsls	r2, r2, #2
 80017d4:	4093      	lsls	r3, r2
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017dc:	4935      	ldr	r1, [pc, #212]	; (80018b4 <HAL_GPIO_Init+0x310>)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ea:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <HAL_GPIO_Init+0x334>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800180e:	4a32      	ldr	r2, [pc, #200]	; (80018d8 <HAL_GPIO_Init+0x334>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <HAL_GPIO_Init+0x334>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001838:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <HAL_GPIO_Init+0x334>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <HAL_GPIO_Init+0x334>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001862:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_GPIO_Init+0x334>)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_GPIO_Init+0x334>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800188c:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <HAL_GPIO_Init+0x334>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3301      	adds	r3, #1
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	2b0f      	cmp	r3, #15
 800189c:	f67f ae90 	bls.w	80015c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40013800 	.word	0x40013800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020400 	.word	0x40020400
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40020c00 	.word	0x40020c00
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40021400 	.word	0x40021400
 80018d0:	40021800 	.word	0x40021800
 80018d4:	40021c00 	.word	0x40021c00
 80018d8:	40013c00 	.word	0x40013c00

080018dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e267      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d075      	beq.n	80019e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018fa:	4b88      	ldr	r3, [pc, #544]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b04      	cmp	r3, #4
 8001904:	d00c      	beq.n	8001920 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001906:	4b85      	ldr	r3, [pc, #532]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800190e:	2b08      	cmp	r3, #8
 8001910:	d112      	bne.n	8001938 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001912:	4b82      	ldr	r3, [pc, #520]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800191e:	d10b      	bne.n	8001938 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	4b7e      	ldr	r3, [pc, #504]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d05b      	beq.n	80019e4 <HAL_RCC_OscConfig+0x108>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d157      	bne.n	80019e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e242      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001940:	d106      	bne.n	8001950 <HAL_RCC_OscConfig+0x74>
 8001942:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a75      	ldr	r2, [pc, #468]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e01d      	b.n	800198c <HAL_RCC_OscConfig+0xb0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x98>
 800195a:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a6f      	ldr	r2, [pc, #444]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b6d      	ldr	r3, [pc, #436]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a6c      	ldr	r2, [pc, #432]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 800196c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0xb0>
 8001974:	4b69      	ldr	r3, [pc, #420]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a68      	ldr	r2, [pc, #416]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 800197a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a65      	ldr	r2, [pc, #404]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff f8f0 	bl	8000b78 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff f8ec 	bl	8000b78 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e207      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b5b      	ldr	r3, [pc, #364]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0xc0>
 80019ba:	e014      	b.n	80019e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff f8dc 	bl	8000b78 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff f8d8 	bl	8000b78 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1f3      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d6:	4b51      	ldr	r3, [pc, #324]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0xe8>
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d063      	beq.n	8001aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d11c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0a:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d116      	bne.n	8001a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a16:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_RCC_OscConfig+0x152>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e1c7      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4937      	ldr	r1, [pc, #220]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a42:	e03a      	b.n	8001aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d020      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a4c:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <HAL_RCC_OscConfig+0x244>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7ff f891 	bl	8000b78 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff f88d 	bl	8000b78 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1a8      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4925      	ldr	r1, [pc, #148]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]
 8001a8c:	e015      	b.n	8001aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_RCC_OscConfig+0x244>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f870 	bl	8000b78 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff f86c 	bl	8000b78 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e187      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d036      	beq.n	8001b34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d016      	beq.n	8001afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_RCC_OscConfig+0x248>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f850 	bl	8000b78 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff f84c 	bl	8000b78 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e167      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x200>
 8001afa:	e01b      	b.n	8001b34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_OscConfig+0x248>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b02:	f7ff f839 	bl	8000b78 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	e00e      	b.n	8001b28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b0a:	f7ff f835 	bl	8000b78 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d907      	bls.n	8001b28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e150      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	42470000 	.word	0x42470000
 8001b24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b28:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ea      	bne.n	8001b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 8097 	beq.w	8001c70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b46:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10f      	bne.n	8001b72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b7d      	ldr	r3, [pc, #500]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a7c      	ldr	r2, [pc, #496]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b7a      	ldr	r3, [pc, #488]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b77      	ldr	r3, [pc, #476]	; (8001d50 <HAL_RCC_OscConfig+0x474>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d118      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7e:	4b74      	ldr	r3, [pc, #464]	; (8001d50 <HAL_RCC_OscConfig+0x474>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a73      	ldr	r2, [pc, #460]	; (8001d50 <HAL_RCC_OscConfig+0x474>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8a:	f7fe fff5 	bl	8000b78 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7fe fff1 	bl	8000b78 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e10c      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <HAL_RCC_OscConfig+0x474>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x2ea>
 8001bb8:	4b64      	ldr	r3, [pc, #400]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a63      	ldr	r2, [pc, #396]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc4:	e01c      	b.n	8001c00 <HAL_RCC_OscConfig+0x324>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b05      	cmp	r3, #5
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x30c>
 8001bce:	4b5f      	ldr	r3, [pc, #380]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	4a5e      	ldr	r2, [pc, #376]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bda:	4b5c      	ldr	r3, [pc, #368]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	4a5b      	ldr	r2, [pc, #364]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0x324>
 8001be8:	4b58      	ldr	r3, [pc, #352]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bec:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf4:	4b55      	ldr	r3, [pc, #340]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	4a54      	ldr	r2, [pc, #336]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bfa:	f023 0304 	bic.w	r3, r3, #4
 8001bfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d015      	beq.n	8001c34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c08:	f7fe ffb6 	bl	8000b78 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c10:	f7fe ffb2 	bl	8000b78 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e0cb      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c26:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0ee      	beq.n	8001c10 <HAL_RCC_OscConfig+0x334>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7fe ffa0 	bl	8000b78 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7fe ff9c 	bl	8000b78 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0b5      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1ee      	bne.n	8001c3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d105      	bne.n	8001c70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c64:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	4a38      	ldr	r2, [pc, #224]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80a1 	beq.w	8001dbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d05c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d141      	bne.n	8001d12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_RCC_OscConfig+0x478>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7fe ff70 	bl	8000b78 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7fe ff6c 	bl	8000b78 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e087      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69da      	ldr	r2, [r3, #28]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	019b      	lsls	r3, r3, #6
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	491b      	ldr	r1, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x478>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7fe ff45 	bl	8000b78 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7fe ff41 	bl	8000b78 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e05c      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x416>
 8001d10:	e054      	b.n	8001dbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCC_OscConfig+0x478>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7fe ff2e 	bl	8000b78 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d20:	f7fe ff2a 	bl	8000b78 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e045      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x444>
 8001d3e:	e03d      	b.n	8001dbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e038      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40007000 	.word	0x40007000
 8001d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x4ec>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d028      	beq.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d121      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d11a      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d88:	4013      	ands	r3, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d111      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	3b01      	subs	r3, #1
 8001da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800

08001dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0cc      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d90c      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b65      	ldr	r3, [pc, #404]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0b8      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e20:	4b59      	ldr	r3, [pc, #356]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e38:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	494d      	ldr	r1, [pc, #308]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d044      	beq.n	8001eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d119      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e07f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e06f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e067      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eaa:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f023 0203 	bic.w	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4934      	ldr	r1, [pc, #208]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fe5c 	bl	8000b78 <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec4:	f7fe fe58 	bl	8000b78 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e04f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 020c 	and.w	r2, r3, #12
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d1eb      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eec:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d20c      	bcs.n	8001f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e032      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4916      	ldr	r1, [pc, #88]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	490e      	ldr	r1, [pc, #56]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f52:	f000 f821 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8001f56:	4602      	mov	r2, r0
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	490a      	ldr	r1, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	5ccb      	ldrb	r3, [r1, r3]
 8001f66:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1c8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fdbc 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023c00 	.word	0x40023c00
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	080034ac 	.word	0x080034ac
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f9c:	b094      	sub	sp, #80	; 0x50
 8001f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fa8:	2300      	movs	r3, #0
 8001faa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fb0:	4b79      	ldr	r3, [pc, #484]	; (8002198 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d00d      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	f200 80e1 	bhi.w	8002184 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x34>
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fca:	e0db      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fcc:	4b73      	ldr	r3, [pc, #460]	; (800219c <HAL_RCC_GetSysClockFreq+0x204>)
 8001fce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001fd0:	e0db      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fd2:	4b73      	ldr	r3, [pc, #460]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001fd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fd6:	e0d8      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fd8:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fe0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fe2:	4b6d      	ldr	r3, [pc, #436]	; (8002198 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d063      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fee:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	099b      	lsrs	r3, r3, #6
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ff8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
 8002006:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800200a:	4622      	mov	r2, r4
 800200c:	462b      	mov	r3, r5
 800200e:	f04f 0000 	mov.w	r0, #0
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	0159      	lsls	r1, r3, #5
 8002018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800201c:	0150      	lsls	r0, r2, #5
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4621      	mov	r1, r4
 8002024:	1a51      	subs	r1, r2, r1
 8002026:	6139      	str	r1, [r7, #16]
 8002028:	4629      	mov	r1, r5
 800202a:	eb63 0301 	sbc.w	r3, r3, r1
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800203c:	4659      	mov	r1, fp
 800203e:	018b      	lsls	r3, r1, #6
 8002040:	4651      	mov	r1, sl
 8002042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002046:	4651      	mov	r1, sl
 8002048:	018a      	lsls	r2, r1, #6
 800204a:	4651      	mov	r1, sl
 800204c:	ebb2 0801 	subs.w	r8, r2, r1
 8002050:	4659      	mov	r1, fp
 8002052:	eb63 0901 	sbc.w	r9, r3, r1
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800206a:	4690      	mov	r8, r2
 800206c:	4699      	mov	r9, r3
 800206e:	4623      	mov	r3, r4
 8002070:	eb18 0303 	adds.w	r3, r8, r3
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	462b      	mov	r3, r5
 8002078:	eb49 0303 	adc.w	r3, r9, r3
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800208a:	4629      	mov	r1, r5
 800208c:	024b      	lsls	r3, r1, #9
 800208e:	4621      	mov	r1, r4
 8002090:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002094:	4621      	mov	r1, r4
 8002096:	024a      	lsls	r2, r1, #9
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209e:	2200      	movs	r2, #0
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020a8:	f7fe f8ee 	bl	8000288 <__aeabi_uldivmod>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4613      	mov	r3, r2
 80020b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020b4:	e058      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b6:	4b38      	ldr	r3, [pc, #224]	; (8002198 <HAL_RCC_GetSysClockFreq+0x200>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	2200      	movs	r2, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	4611      	mov	r1, r2
 80020c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020c6:	623b      	str	r3, [r7, #32]
 80020c8:	2300      	movs	r3, #0
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
 80020cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020d0:	4642      	mov	r2, r8
 80020d2:	464b      	mov	r3, r9
 80020d4:	f04f 0000 	mov.w	r0, #0
 80020d8:	f04f 0100 	mov.w	r1, #0
 80020dc:	0159      	lsls	r1, r3, #5
 80020de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020e2:	0150      	lsls	r0, r2, #5
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4641      	mov	r1, r8
 80020ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80020ee:	4649      	mov	r1, r9
 80020f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002100:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002104:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002108:	ebb2 040a 	subs.w	r4, r2, sl
 800210c:	eb63 050b 	sbc.w	r5, r3, fp
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	00eb      	lsls	r3, r5, #3
 800211a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800211e:	00e2      	lsls	r2, r4, #3
 8002120:	4614      	mov	r4, r2
 8002122:	461d      	mov	r5, r3
 8002124:	4643      	mov	r3, r8
 8002126:	18e3      	adds	r3, r4, r3
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	464b      	mov	r3, r9
 800212c:	eb45 0303 	adc.w	r3, r5, r3
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800213e:	4629      	mov	r1, r5
 8002140:	028b      	lsls	r3, r1, #10
 8002142:	4621      	mov	r1, r4
 8002144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002148:	4621      	mov	r1, r4
 800214a:	028a      	lsls	r2, r1, #10
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002152:	2200      	movs	r2, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	61fa      	str	r2, [r7, #28]
 8002158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800215c:	f7fe f894 	bl	8000288 <__aeabi_uldivmod>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4613      	mov	r3, r2
 8002166:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_GetSysClockFreq+0x200>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	3301      	adds	r3, #1
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002178:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800217a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002182:	e002      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetSysClockFreq+0x204>)
 8002186:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800218c:	4618      	mov	r0, r3
 800218e:	3750      	adds	r7, #80	; 0x50
 8002190:	46bd      	mov	sp, r7
 8002192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	00f42400 	.word	0x00f42400
 80021a0:	007a1200 	.word	0x007a1200

080021a4 <arm_max_f32>:
 80021a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021a8:	1e4f      	subs	r7, r1, #1
 80021aa:	ea5f 0897 	movs.w	r8, r7, lsr #2
 80021ae:	f100 0e04 	add.w	lr, r0, #4
 80021b2:	edd0 7a00 	vldr	s15, [r0]
 80021b6:	d058      	beq.n	800226a <arm_max_f32+0xc6>
 80021b8:	3014      	adds	r0, #20
 80021ba:	46c4      	mov	ip, r8
 80021bc:	2604      	movs	r6, #4
 80021be:	2400      	movs	r4, #0
 80021c0:	ed10 6a04 	vldr	s12, [r0, #-16]
 80021c4:	ed50 6a03 	vldr	s13, [r0, #-12]
 80021c8:	ed10 7a02 	vldr	s14, [r0, #-8]
 80021cc:	ed50 5a01 	vldr	s11, [r0, #-4]
 80021d0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80021d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d8:	bfc8      	it	gt
 80021da:	eef0 7a46 	vmovgt.f32	s15, s12
 80021de:	f1a6 0503 	sub.w	r5, r6, #3
 80021e2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80021e6:	bfc8      	it	gt
 80021e8:	462c      	movgt	r4, r5
 80021ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ee:	bf48      	it	mi
 80021f0:	eef0 7a66 	vmovmi.f32	s15, s13
 80021f4:	f1a6 0502 	sub.w	r5, r6, #2
 80021f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fc:	bf48      	it	mi
 80021fe:	462c      	movmi	r4, r5
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	bf48      	it	mi
 8002206:	eef0 7a47 	vmovmi.f32	s15, s14
 800220a:	f106 35ff 	add.w	r5, r6, #4294967295
 800220e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002212:	bf48      	it	mi
 8002214:	462c      	movmi	r4, r5
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	bf48      	it	mi
 800221c:	4634      	movmi	r4, r6
 800221e:	bf48      	it	mi
 8002220:	eef0 7a65 	vmovmi.f32	s15, s11
 8002224:	f1bc 0c01 	subs.w	ip, ip, #1
 8002228:	f106 0604 	add.w	r6, r6, #4
 800222c:	f100 0010 	add.w	r0, r0, #16
 8002230:	d1c6      	bne.n	80021c0 <arm_max_f32+0x1c>
 8002232:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8002236:	f017 0003 	ands.w	r0, r7, #3
 800223a:	d018      	beq.n	800226e <arm_max_f32+0xca>
 800223c:	1a08      	subs	r0, r1, r0
 800223e:	ecbe 7a01 	vldmia	lr!, {s14}
 8002242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224a:	bfc8      	it	gt
 800224c:	4604      	movgt	r4, r0
 800224e:	f100 0001 	add.w	r0, r0, #1
 8002252:	bfd8      	it	le
 8002254:	eeb0 7a67 	vmovle.f32	s14, s15
 8002258:	4288      	cmp	r0, r1
 800225a:	eef0 7a47 	vmov.f32	s15, s14
 800225e:	d1ee      	bne.n	800223e <arm_max_f32+0x9a>
 8002260:	ed82 7a00 	vstr	s14, [r2]
 8002264:	601c      	str	r4, [r3, #0]
 8002266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800226a:	4644      	mov	r4, r8
 800226c:	e7e3      	b.n	8002236 <arm_max_f32+0x92>
 800226e:	eeb0 7a67 	vmov.f32	s14, s15
 8002272:	e7f5      	b.n	8002260 <arm_max_f32+0xbc>

08002274 <arm_rfft_fast_init_f32>:
 8002274:	084b      	lsrs	r3, r1, #1
 8002276:	2b80      	cmp	r3, #128	; 0x80
 8002278:	b410      	push	{r4}
 800227a:	8201      	strh	r1, [r0, #16]
 800227c:	8003      	strh	r3, [r0, #0]
 800227e:	d047      	beq.n	8002310 <arm_rfft_fast_init_f32+0x9c>
 8002280:	d917      	bls.n	80022b2 <arm_rfft_fast_init_f32+0x3e>
 8002282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002286:	d03d      	beq.n	8002304 <arm_rfft_fast_init_f32+0x90>
 8002288:	d929      	bls.n	80022de <arm_rfft_fast_init_f32+0x6a>
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	d020      	beq.n	80022d2 <arm_rfft_fast_init_f32+0x5e>
 8002290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002294:	d113      	bne.n	80022be <arm_rfft_fast_init_f32+0x4a>
 8002296:	4921      	ldr	r1, [pc, #132]	; (800231c <arm_rfft_fast_init_f32+0xa8>)
 8002298:	4a21      	ldr	r2, [pc, #132]	; (8002320 <arm_rfft_fast_init_f32+0xac>)
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <arm_rfft_fast_init_f32+0xb0>)
 800229c:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80022a0:	8184      	strh	r4, [r0, #12]
 80022a2:	6081      	str	r1, [r0, #8]
 80022a4:	6042      	str	r2, [r0, #4]
 80022a6:	6143      	str	r3, [r0, #20]
 80022a8:	2000      	movs	r0, #0
 80022aa:	b240      	sxtb	r0, r0
 80022ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	d01c      	beq.n	80022f0 <arm_rfft_fast_init_f32+0x7c>
 80022b6:	2b40      	cmp	r3, #64	; 0x40
 80022b8:	d006      	beq.n	80022c8 <arm_rfft_fast_init_f32+0x54>
 80022ba:	2b10      	cmp	r3, #16
 80022bc:	d01d      	beq.n	80022fa <arm_rfft_fast_init_f32+0x86>
 80022be:	20ff      	movs	r0, #255	; 0xff
 80022c0:	b240      	sxtb	r0, r0
 80022c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	2438      	movs	r4, #56	; 0x38
 80022ca:	4917      	ldr	r1, [pc, #92]	; (8002328 <arm_rfft_fast_init_f32+0xb4>)
 80022cc:	4a17      	ldr	r2, [pc, #92]	; (800232c <arm_rfft_fast_init_f32+0xb8>)
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <arm_rfft_fast_init_f32+0xbc>)
 80022d0:	e7e6      	b.n	80022a0 <arm_rfft_fast_init_f32+0x2c>
 80022d2:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80022d6:	4917      	ldr	r1, [pc, #92]	; (8002334 <arm_rfft_fast_init_f32+0xc0>)
 80022d8:	4a17      	ldr	r2, [pc, #92]	; (8002338 <arm_rfft_fast_init_f32+0xc4>)
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <arm_rfft_fast_init_f32+0xc8>)
 80022dc:	e7e0      	b.n	80022a0 <arm_rfft_fast_init_f32+0x2c>
 80022de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e2:	d1ec      	bne.n	80022be <arm_rfft_fast_init_f32+0x4a>
 80022e4:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80022e8:	4915      	ldr	r1, [pc, #84]	; (8002340 <arm_rfft_fast_init_f32+0xcc>)
 80022ea:	4a16      	ldr	r2, [pc, #88]	; (8002344 <arm_rfft_fast_init_f32+0xd0>)
 80022ec:	4b16      	ldr	r3, [pc, #88]	; (8002348 <arm_rfft_fast_init_f32+0xd4>)
 80022ee:	e7d7      	b.n	80022a0 <arm_rfft_fast_init_f32+0x2c>
 80022f0:	2430      	movs	r4, #48	; 0x30
 80022f2:	4916      	ldr	r1, [pc, #88]	; (800234c <arm_rfft_fast_init_f32+0xd8>)
 80022f4:	4a16      	ldr	r2, [pc, #88]	; (8002350 <arm_rfft_fast_init_f32+0xdc>)
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <arm_rfft_fast_init_f32+0xe0>)
 80022f8:	e7d2      	b.n	80022a0 <arm_rfft_fast_init_f32+0x2c>
 80022fa:	2414      	movs	r4, #20
 80022fc:	4916      	ldr	r1, [pc, #88]	; (8002358 <arm_rfft_fast_init_f32+0xe4>)
 80022fe:	4a17      	ldr	r2, [pc, #92]	; (800235c <arm_rfft_fast_init_f32+0xe8>)
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <arm_rfft_fast_init_f32+0xec>)
 8002302:	e7cd      	b.n	80022a0 <arm_rfft_fast_init_f32+0x2c>
 8002304:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8002308:	4916      	ldr	r1, [pc, #88]	; (8002364 <arm_rfft_fast_init_f32+0xf0>)
 800230a:	4a17      	ldr	r2, [pc, #92]	; (8002368 <arm_rfft_fast_init_f32+0xf4>)
 800230c:	4b17      	ldr	r3, [pc, #92]	; (800236c <arm_rfft_fast_init_f32+0xf8>)
 800230e:	e7c7      	b.n	80022a0 <arm_rfft_fast_init_f32+0x2c>
 8002310:	24d0      	movs	r4, #208	; 0xd0
 8002312:	4917      	ldr	r1, [pc, #92]	; (8002370 <arm_rfft_fast_init_f32+0xfc>)
 8002314:	4a17      	ldr	r2, [pc, #92]	; (8002374 <arm_rfft_fast_init_f32+0x100>)
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <arm_rfft_fast_init_f32+0x104>)
 8002318:	e7c2      	b.n	80022a0 <arm_rfft_fast_init_f32+0x2c>
 800231a:	bf00      	nop
 800231c:	080122c4 	.word	0x080122c4
 8002320:	080034bc 	.word	0x080034bc
 8002324:	0800962c 	.word	0x0800962c
 8002328:	080075bc 	.word	0x080075bc
 800232c:	08014084 	.word	0x08014084
 8002330:	08016574 	.word	0x08016574
 8002334:	0800ffac 	.word	0x0800ffac
 8002338:	0800deac 	.word	0x0800deac
 800233c:	0800762c 	.word	0x0800762c
 8002340:	08016204 	.word	0x08016204
 8002344:	0800d62c 	.word	0x0800d62c
 8002348:	08014284 	.word	0x08014284
 800234c:	08010e64 	.word	0x08010e64
 8002350:	0800feac 	.word	0x0800feac
 8002354:	080074bc 	.word	0x080074bc
 8002358:	08010dbc 	.word	0x08010dbc
 800235c:	0800de2c 	.word	0x0800de2c
 8002360:	08010de4 	.word	0x08010de4
 8002364:	08014a84 	.word	0x08014a84
 8002368:	080112c4 	.word	0x080112c4
 800236c:	08014e04 	.word	0x08014e04
 8002370:	08016774 	.word	0x08016774
 8002374:	08010ec4 	.word	0x08010ec4
 8002378:	08015e04 	.word	0x08015e04

0800237c <arm_rfft_fast_f32>:
 800237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002380:	8a06      	ldrh	r6, [r0, #16]
 8002382:	0876      	lsrs	r6, r6, #1
 8002384:	4607      	mov	r7, r0
 8002386:	4615      	mov	r5, r2
 8002388:	8006      	strh	r6, [r0, #0]
 800238a:	460c      	mov	r4, r1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d15c      	bne.n	800244a <arm_rfft_fast_f32+0xce>
 8002390:	461a      	mov	r2, r3
 8002392:	2301      	movs	r3, #1
 8002394:	f000 fbe6 	bl	8002b64 <arm_cfft_f32>
 8002398:	edd4 7a00 	vldr	s15, [r4]
 800239c:	ed94 7a01 	vldr	s14, [r4, #4]
 80023a0:	883e      	ldrh	r6, [r7, #0]
 80023a2:	6978      	ldr	r0, [r7, #20]
 80023a4:	ee37 7a07 	vadd.f32	s14, s14, s14
 80023a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023ac:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80023b0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80023b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023b8:	3e01      	subs	r6, #1
 80023ba:	ee26 7aa3 	vmul.f32	s14, s13, s7
 80023be:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80023c2:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80023c6:	ed85 7a00 	vstr	s14, [r5]
 80023ca:	edc5 7a01 	vstr	s15, [r5, #4]
 80023ce:	3010      	adds	r0, #16
 80023d0:	f105 0210 	add.w	r2, r5, #16
 80023d4:	3b08      	subs	r3, #8
 80023d6:	f104 0110 	add.w	r1, r4, #16
 80023da:	ed51 4a02 	vldr	s9, [r1, #-8]
 80023de:	ed93 5a02 	vldr	s10, [r3, #8]
 80023e2:	ed11 7a01 	vldr	s14, [r1, #-4]
 80023e6:	ed10 6a02 	vldr	s12, [r0, #-8]
 80023ea:	edd3 5a03 	vldr	s11, [r3, #12]
 80023ee:	ed50 6a01 	vldr	s13, [r0, #-4]
 80023f2:	ee75 7a64 	vsub.f32	s15, s10, s9
 80023f6:	ee35 4a87 	vadd.f32	s8, s11, s14
 80023fa:	ee35 5a24 	vadd.f32	s10, s10, s9
 80023fe:	ee77 5a65 	vsub.f32	s11, s14, s11
 8002402:	ee66 4a27 	vmul.f32	s9, s12, s15
 8002406:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800240a:	ee34 5a85 	vadd.f32	s10, s9, s10
 800240e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002412:	ee66 6a84 	vmul.f32	s13, s13, s8
 8002416:	ee77 7a25 	vadd.f32	s15, s14, s11
 800241a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800241e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002422:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8002426:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800242a:	3e01      	subs	r6, #1
 800242c:	ed42 6a02 	vstr	s13, [r2, #-8]
 8002430:	ed42 7a01 	vstr	s15, [r2, #-4]
 8002434:	f1a3 0308 	sub.w	r3, r3, #8
 8002438:	f101 0108 	add.w	r1, r1, #8
 800243c:	f100 0008 	add.w	r0, r0, #8
 8002440:	f102 0208 	add.w	r2, r2, #8
 8002444:	d1c9      	bne.n	80023da <arm_rfft_fast_f32+0x5e>
 8002446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800244a:	edd1 7a00 	vldr	s15, [r1]
 800244e:	edd1 6a01 	vldr	s13, [r1, #4]
 8002452:	6941      	ldr	r1, [r0, #20]
 8002454:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002458:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800245c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8002460:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002464:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8002468:	3e01      	subs	r6, #1
 800246a:	ed82 7a00 	vstr	s14, [r2]
 800246e:	edc2 7a01 	vstr	s15, [r2, #4]
 8002472:	00f0      	lsls	r0, r6, #3
 8002474:	b3ee      	cbz	r6, 80024f2 <arm_rfft_fast_f32+0x176>
 8002476:	3808      	subs	r0, #8
 8002478:	f101 0e10 	add.w	lr, r1, #16
 800247c:	4420      	add	r0, r4
 800247e:	f104 0110 	add.w	r1, r4, #16
 8002482:	f102 0c10 	add.w	ip, r2, #16
 8002486:	ed90 7a02 	vldr	s14, [r0, #8]
 800248a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800248e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8002492:	ed90 4a03 	vldr	s8, [r0, #12]
 8002496:	ed11 5a01 	vldr	s10, [r1, #-4]
 800249a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800249e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80024a2:	ee74 4a05 	vadd.f32	s9, s8, s10
 80024a6:	ee26 3a27 	vmul.f32	s6, s12, s15
 80024aa:	ee77 6a26 	vadd.f32	s13, s14, s13
 80024ae:	ee35 5a44 	vsub.f32	s10, s10, s8
 80024b2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80024b6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80024ba:	ee77 7a05 	vadd.f32	s15, s14, s10
 80024be:	ee26 6a24 	vmul.f32	s12, s12, s9
 80024c2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80024c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80024ca:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80024ce:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80024d2:	ee27 7a23 	vmul.f32	s14, s14, s7
 80024d6:	3e01      	subs	r6, #1
 80024d8:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80024dc:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80024e0:	f1a0 0008 	sub.w	r0, r0, #8
 80024e4:	f101 0108 	add.w	r1, r1, #8
 80024e8:	f10e 0e08 	add.w	lr, lr, #8
 80024ec:	f10c 0c08 	add.w	ip, ip, #8
 80024f0:	d1c9      	bne.n	8002486 <arm_rfft_fast_f32+0x10a>
 80024f2:	4638      	mov	r0, r7
 80024f4:	4629      	mov	r1, r5
 80024f6:	461a      	mov	r2, r3
 80024f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024fc:	2301      	movs	r3, #1
 80024fe:	f000 bb31 	b.w	8002b64 <arm_cfft_f32>
 8002502:	bf00      	nop

08002504 <arm_cfft_radix8by2_f32>:
 8002504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002508:	ed2d 8b08 	vpush	{d8-d11}
 800250c:	f8b0 e000 	ldrh.w	lr, [r0]
 8002510:	6842      	ldr	r2, [r0, #4]
 8002512:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8002516:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800251a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800251e:	4607      	mov	r7, r0
 8002520:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8002524:	f000 80af 	beq.w	8002686 <arm_cfft_radix8by2_f32+0x182>
 8002528:	3310      	adds	r3, #16
 800252a:	18ce      	adds	r6, r1, r3
 800252c:	3210      	adds	r2, #16
 800252e:	4443      	add	r3, r8
 8002530:	f101 0510 	add.w	r5, r1, #16
 8002534:	f108 0410 	add.w	r4, r8, #16
 8002538:	ed54 1a04 	vldr	s3, [r4, #-16]
 800253c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8002540:	ed53 3a03 	vldr	s7, [r3, #-12]
 8002544:	ed53 5a02 	vldr	s11, [r3, #-8]
 8002548:	ed13 5a01 	vldr	s10, [r3, #-4]
 800254c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8002550:	ed14 0a02 	vldr	s0, [r4, #-8]
 8002554:	ed16 2a04 	vldr	s4, [r6, #-16]
 8002558:	ed56 2a03 	vldr	s5, [r6, #-12]
 800255c:	ed15 6a03 	vldr	s12, [r5, #-12]
 8002560:	ed15 7a01 	vldr	s14, [r5, #-4]
 8002564:	ed15 3a04 	vldr	s6, [r5, #-16]
 8002568:	ed54 7a01 	vldr	s15, [r4, #-4]
 800256c:	ed56 0a02 	vldr	s1, [r6, #-8]
 8002570:	ed16 1a01 	vldr	s2, [r6, #-4]
 8002574:	ed55 4a02 	vldr	s9, [r5, #-8]
 8002578:	ee73 ba21 	vadd.f32	s23, s6, s3
 800257c:	ee36 ba26 	vadd.f32	s22, s12, s13
 8002580:	ee37 aa27 	vadd.f32	s20, s14, s15
 8002584:	ee72 9a04 	vadd.f32	s19, s4, s8
 8002588:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800258c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8002590:	ee74 aa80 	vadd.f32	s21, s9, s0
 8002594:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8002598:	ed45 ba04 	vstr	s23, [r5, #-16]
 800259c:	ed05 ba03 	vstr	s22, [r5, #-12]
 80025a0:	ed45 aa02 	vstr	s21, [r5, #-8]
 80025a4:	ed05 aa01 	vstr	s20, [r5, #-4]
 80025a8:	ed06 8a01 	vstr	s16, [r6, #-4]
 80025ac:	ed46 9a04 	vstr	s19, [r6, #-16]
 80025b0:	ed06 9a03 	vstr	s18, [r6, #-12]
 80025b4:	ed46 8a02 	vstr	s17, [r6, #-8]
 80025b8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80025bc:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80025c0:	ed12 6a03 	vldr	s12, [r2, #-12]
 80025c4:	ed52 2a04 	vldr	s5, [r2, #-16]
 80025c8:	ee33 3a61 	vsub.f32	s6, s6, s3
 80025cc:	ee34 4a42 	vsub.f32	s8, s8, s4
 80025d0:	ee26 8a86 	vmul.f32	s16, s13, s12
 80025d4:	ee24 2a06 	vmul.f32	s4, s8, s12
 80025d8:	ee63 1a22 	vmul.f32	s3, s6, s5
 80025dc:	ee24 4a22 	vmul.f32	s8, s8, s5
 80025e0:	ee23 3a06 	vmul.f32	s6, s6, s12
 80025e4:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80025e8:	ee23 6a86 	vmul.f32	s12, s7, s12
 80025ec:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80025f0:	ee36 6a04 	vadd.f32	s12, s12, s8
 80025f4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80025f8:	ee72 3a63 	vsub.f32	s7, s4, s7
 80025fc:	ee71 2a88 	vadd.f32	s5, s3, s16
 8002600:	ed44 6a03 	vstr	s13, [r4, #-12]
 8002604:	ed44 2a04 	vstr	s5, [r4, #-16]
 8002608:	ed43 3a04 	vstr	s7, [r3, #-16]
 800260c:	ed03 6a03 	vstr	s12, [r3, #-12]
 8002610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002614:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8002618:	ed12 7a01 	vldr	s14, [r2, #-4]
 800261c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8002620:	ee35 6a41 	vsub.f32	s12, s10, s2
 8002624:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8002628:	ee67 3a87 	vmul.f32	s7, s15, s14
 800262c:	ee26 5a87 	vmul.f32	s10, s13, s14
 8002630:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8002634:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002638:	ee64 4a87 	vmul.f32	s9, s9, s14
 800263c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002640:	ee26 7a07 	vmul.f32	s14, s12, s14
 8002644:	ee26 6a25 	vmul.f32	s12, s12, s11
 8002648:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800264c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8002650:	ee35 6a46 	vsub.f32	s12, s10, s12
 8002654:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002658:	f1be 0e01 	subs.w	lr, lr, #1
 800265c:	ed44 5a02 	vstr	s11, [r4, #-8]
 8002660:	f105 0510 	add.w	r5, r5, #16
 8002664:	ed44 7a01 	vstr	s15, [r4, #-4]
 8002668:	f106 0610 	add.w	r6, r6, #16
 800266c:	ed03 6a02 	vstr	s12, [r3, #-8]
 8002670:	ed03 7a01 	vstr	s14, [r3, #-4]
 8002674:	f102 0210 	add.w	r2, r2, #16
 8002678:	f104 0410 	add.w	r4, r4, #16
 800267c:	f103 0310 	add.w	r3, r3, #16
 8002680:	f47f af5a 	bne.w	8002538 <arm_cfft_radix8by2_f32+0x34>
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	fa1f f48c 	uxth.w	r4, ip
 800268a:	4608      	mov	r0, r1
 800268c:	2302      	movs	r3, #2
 800268e:	4621      	mov	r1, r4
 8002690:	f000 fbca 	bl	8002e28 <arm_radix8_butterfly_f32>
 8002694:	ecbd 8b08 	vpop	{d8-d11}
 8002698:	4640      	mov	r0, r8
 800269a:	4621      	mov	r1, r4
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	2302      	movs	r3, #2
 80026a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026a4:	f000 bbc0 	b.w	8002e28 <arm_radix8_butterfly_f32>

080026a8 <arm_cfft_radix8by4_f32>:
 80026a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026ac:	ed2d 8b0a 	vpush	{d8-d12}
 80026b0:	8802      	ldrh	r2, [r0, #0]
 80026b2:	ed91 6a00 	vldr	s12, [r1]
 80026b6:	b08f      	sub	sp, #60	; 0x3c
 80026b8:	460f      	mov	r7, r1
 80026ba:	0852      	lsrs	r2, r2, #1
 80026bc:	0093      	lsls	r3, r2, #2
 80026be:	900c      	str	r0, [sp, #48]	; 0x30
 80026c0:	9103      	str	r1, [sp, #12]
 80026c2:	6841      	ldr	r1, [r0, #4]
 80026c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80026c8:	4638      	mov	r0, r7
 80026ca:	4418      	add	r0, r3
 80026cc:	4606      	mov	r6, r0
 80026ce:	9009      	str	r0, [sp, #36]	; 0x24
 80026d0:	4418      	add	r0, r3
 80026d2:	edd0 6a00 	vldr	s13, [r0]
 80026d6:	edd6 3a00 	vldr	s7, [r6]
 80026da:	edd6 2a01 	vldr	s5, [r6, #4]
 80026de:	edd0 7a01 	vldr	s15, [r0, #4]
 80026e2:	900a      	str	r0, [sp, #40]	; 0x28
 80026e4:	ee76 5a26 	vadd.f32	s11, s12, s13
 80026e8:	4604      	mov	r4, r0
 80026ea:	4625      	mov	r5, r4
 80026ec:	441c      	add	r4, r3
 80026ee:	ed94 4a00 	vldr	s8, [r4]
 80026f2:	ed94 5a01 	vldr	s10, [r4, #4]
 80026f6:	9401      	str	r4, [sp, #4]
 80026f8:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80026fc:	4630      	mov	r0, r6
 80026fe:	ee74 4a24 	vadd.f32	s9, s8, s9
 8002702:	463e      	mov	r6, r7
 8002704:	ee14 ea90 	vmov	lr, s9
 8002708:	ee76 6a66 	vsub.f32	s13, s12, s13
 800270c:	f846 eb08 	str.w	lr, [r6], #8
 8002710:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002714:	edd0 4a01 	vldr	s9, [r0, #4]
 8002718:	9604      	str	r6, [sp, #16]
 800271a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271e:	9e01      	ldr	r6, [sp, #4]
 8002720:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8002724:	ed96 2a01 	vldr	s4, [r6, #4]
 8002728:	ee36 7a24 	vadd.f32	s14, s12, s9
 800272c:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8002730:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8002734:	ee36 6a62 	vsub.f32	s12, s12, s5
 8002738:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800273c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8002740:	ee73 3a45 	vsub.f32	s7, s6, s10
 8002744:	4604      	mov	r4, r0
 8002746:	ee36 6a45 	vsub.f32	s12, s12, s10
 800274a:	ee75 6a26 	vadd.f32	s13, s10, s13
 800274e:	46a3      	mov	fp, r4
 8002750:	ee37 7a02 	vadd.f32	s14, s14, s4
 8002754:	ee34 5a84 	vadd.f32	s10, s9, s8
 8002758:	ee13 8a90 	vmov	r8, s7
 800275c:	46a4      	mov	ip, r4
 800275e:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8002762:	ed87 7a01 	vstr	s14, [r7, #4]
 8002766:	f84b 8b08 	str.w	r8, [fp], #8
 800276a:	f1ac 0704 	sub.w	r7, ip, #4
 800276e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8002772:	f101 0c08 	add.w	ip, r1, #8
 8002776:	462c      	mov	r4, r5
 8002778:	f8cd c014 	str.w	ip, [sp, #20]
 800277c:	ee15 ca90 	vmov	ip, s11
 8002780:	f844 cb08 	str.w	ip, [r4], #8
 8002784:	9407      	str	r4, [sp, #28]
 8002786:	f101 0410 	add.w	r4, r1, #16
 800278a:	ed85 6a01 	vstr	s12, [r5, #4]
 800278e:	0852      	lsrs	r2, r2, #1
 8002790:	9402      	str	r4, [sp, #8]
 8002792:	462c      	mov	r4, r5
 8002794:	f101 0518 	add.w	r5, r1, #24
 8002798:	920b      	str	r2, [sp, #44]	; 0x2c
 800279a:	46b2      	mov	sl, r6
 800279c:	9506      	str	r5, [sp, #24]
 800279e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80027a2:	3a02      	subs	r2, #2
 80027a4:	ee16 5a90 	vmov	r5, s13
 80027a8:	46b6      	mov	lr, r6
 80027aa:	4630      	mov	r0, r6
 80027ac:	0852      	lsrs	r2, r2, #1
 80027ae:	f84a 5b08 	str.w	r5, [sl], #8
 80027b2:	f1a0 0604 	sub.w	r6, r0, #4
 80027b6:	edce 7a01 	vstr	s15, [lr, #4]
 80027ba:	9208      	str	r2, [sp, #32]
 80027bc:	f000 8130 	beq.w	8002a20 <arm_cfft_radix8by4_f32+0x378>
 80027c0:	4691      	mov	r9, r2
 80027c2:	9a03      	ldr	r2, [sp, #12]
 80027c4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80027c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80027cc:	3b08      	subs	r3, #8
 80027ce:	f102 0510 	add.w	r5, r2, #16
 80027d2:	f101 0c20 	add.w	ip, r1, #32
 80027d6:	f1a4 020c 	sub.w	r2, r4, #12
 80027da:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80027de:	4433      	add	r3, r6
 80027e0:	3410      	adds	r4, #16
 80027e2:	4650      	mov	r0, sl
 80027e4:	4659      	mov	r1, fp
 80027e6:	ed55 3a02 	vldr	s7, [r5, #-8]
 80027ea:	ed14 5a02 	vldr	s10, [r4, #-8]
 80027ee:	ed91 7a00 	vldr	s14, [r1]
 80027f2:	edd0 7a00 	vldr	s15, [r0]
 80027f6:	ed15 4a01 	vldr	s8, [r5, #-4]
 80027fa:	ed54 5a01 	vldr	s11, [r4, #-4]
 80027fe:	edd0 6a01 	vldr	s13, [r0, #4]
 8002802:	ed91 6a01 	vldr	s12, [r1, #4]
 8002806:	ee33 8a85 	vadd.f32	s16, s7, s10
 800280a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800280e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8002812:	ee74 5a65 	vsub.f32	s11, s8, s11
 8002816:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800281a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800281e:	ed45 4a02 	vstr	s9, [r5, #-8]
 8002822:	edd1 4a01 	vldr	s9, [r1, #4]
 8002826:	ed90 4a01 	vldr	s8, [r0, #4]
 800282a:	ee70 4a24 	vadd.f32	s9, s0, s9
 800282e:	ee76 aa05 	vadd.f32	s21, s12, s10
 8002832:	ee74 4a84 	vadd.f32	s9, s9, s8
 8002836:	ee35 aac7 	vsub.f32	s20, s11, s14
 800283a:	ed45 4a01 	vstr	s9, [r5, #-4]
 800283e:	edd6 1a00 	vldr	s3, [r6]
 8002842:	edd7 0a00 	vldr	s1, [r7]
 8002846:	ed92 4a02 	vldr	s8, [r2, #8]
 800284a:	edd3 3a02 	vldr	s7, [r3, #8]
 800284e:	ed93 2a01 	vldr	s4, [r3, #4]
 8002852:	ed16 1a01 	vldr	s2, [r6, #-4]
 8002856:	edd2 2a01 	vldr	s5, [r2, #4]
 800285a:	ed57 9a01 	vldr	s19, [r7, #-4]
 800285e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8002862:	ee39 3a81 	vadd.f32	s6, s19, s2
 8002866:	ee74 8a84 	vadd.f32	s17, s9, s8
 800286a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800286e:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8002872:	ee7a aae6 	vsub.f32	s21, s21, s13
 8002876:	ee18 aa90 	vmov	sl, s17
 800287a:	f847 a908 	str.w	sl, [r7], #-8
 800287e:	edd2 8a01 	vldr	s17, [r2, #4]
 8002882:	ed93 9a01 	vldr	s18, [r3, #4]
 8002886:	ee73 8a28 	vadd.f32	s17, s6, s17
 800288a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800288e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8002892:	ee74 0a63 	vsub.f32	s1, s8, s7
 8002896:	edc7 8a01 	vstr	s17, [r7, #4]
 800289a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800289e:	ed58 8a01 	vldr	s17, [r8, #-4]
 80028a2:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80028a6:	ee6a ba28 	vmul.f32	s23, s20, s17
 80028aa:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80028ae:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80028b2:	ee30 9a81 	vadd.f32	s18, s1, s2
 80028b6:	ee79 9a82 	vadd.f32	s19, s19, s4
 80028ba:	ee3c ca2b 	vadd.f32	s24, s24, s23
 80028be:	ee6a aaa8 	vmul.f32	s21, s21, s17
 80028c2:	ee69 baa8 	vmul.f32	s23, s19, s17
 80028c6:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80028ca:	ee69 9a8b 	vmul.f32	s19, s19, s22
 80028ce:	ee69 8a28 	vmul.f32	s17, s18, s17
 80028d2:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80028d6:	ee1c aa10 	vmov	sl, s24
 80028da:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80028de:	f841 ab08 	str.w	sl, [r1], #8
 80028e2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80028e6:	ee3b bacb 	vsub.f32	s22, s23, s22
 80028ea:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80028ee:	ee33 3a62 	vsub.f32	s6, s6, s5
 80028f2:	ed01 aa01 	vstr	s20, [r1, #-4]
 80028f6:	edc2 8a01 	vstr	s17, [r2, #4]
 80028fa:	ed82 ba02 	vstr	s22, [r2, #8]
 80028fe:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8002902:	ee74 3a63 	vsub.f32	s7, s8, s7
 8002906:	ee38 8a47 	vsub.f32	s16, s16, s14
 800290a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800290e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8002912:	ee33 3a42 	vsub.f32	s6, s6, s4
 8002916:	ee38 8a67 	vsub.f32	s16, s16, s15
 800291a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800291e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8002922:	ee63 8a04 	vmul.f32	s17, s6, s8
 8002926:	ee28 aa24 	vmul.f32	s20, s16, s9
 800292a:	ee60 9a04 	vmul.f32	s19, s0, s8
 800292e:	ee28 8a04 	vmul.f32	s16, s16, s8
 8002932:	ee20 0a24 	vmul.f32	s0, s0, s9
 8002936:	ee63 3a84 	vmul.f32	s7, s7, s8
 800293a:	ee39 4a68 	vsub.f32	s8, s18, s17
 800293e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8002942:	ee14 aa10 	vmov	sl, s8
 8002946:	ee30 0a48 	vsub.f32	s0, s0, s16
 800294a:	ee63 4a24 	vmul.f32	s9, s6, s9
 800294e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8002952:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8002956:	ed04 0a01 	vstr	s0, [r4, #-4]
 800295a:	f846 a908 	str.w	sl, [r6], #-8
 800295e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8002962:	ee35 7a87 	vadd.f32	s14, s11, s14
 8002966:	edc6 3a01 	vstr	s7, [r6, #4]
 800296a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800296e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002972:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8002976:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800297a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800297e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8002982:	ee72 2a62 	vsub.f32	s5, s4, s5
 8002986:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800298a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800298e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8002992:	ee62 0a86 	vmul.f32	s1, s5, s12
 8002996:	ee66 6a86 	vmul.f32	s13, s13, s12
 800299a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299e:	ee21 6a06 	vmul.f32	s12, s2, s12
 80029a2:	ee62 2a87 	vmul.f32	s5, s5, s14
 80029a6:	ee21 1a07 	vmul.f32	s2, s2, s14
 80029aa:	ee15 aa90 	vmov	sl, s11
 80029ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029b2:	f840 ab08 	str.w	sl, [r0], #8
 80029b6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80029ba:	ee76 2a22 	vadd.f32	s5, s12, s5
 80029be:	f1b9 0901 	subs.w	r9, r9, #1
 80029c2:	ed40 7a01 	vstr	s15, [r0, #-4]
 80029c6:	f105 0508 	add.w	r5, r5, #8
 80029ca:	ed83 1a02 	vstr	s2, [r3, #8]
 80029ce:	edc3 2a01 	vstr	s5, [r3, #4]
 80029d2:	f108 0808 	add.w	r8, r8, #8
 80029d6:	f1a2 0208 	sub.w	r2, r2, #8
 80029da:	f10c 0c10 	add.w	ip, ip, #16
 80029de:	f104 0408 	add.w	r4, r4, #8
 80029e2:	f10e 0e18 	add.w	lr, lr, #24
 80029e6:	f1a3 0308 	sub.w	r3, r3, #8
 80029ea:	f47f aefc 	bne.w	80027e6 <arm_cfft_radix8by4_f32+0x13e>
 80029ee:	9908      	ldr	r1, [sp, #32]
 80029f0:	9802      	ldr	r0, [sp, #8]
 80029f2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80029f6:	00cb      	lsls	r3, r1, #3
 80029f8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80029fc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002a00:	9102      	str	r1, [sp, #8]
 8002a02:	9904      	ldr	r1, [sp, #16]
 8002a04:	4419      	add	r1, r3
 8002a06:	9104      	str	r1, [sp, #16]
 8002a08:	9905      	ldr	r1, [sp, #20]
 8002a0a:	4419      	add	r1, r3
 8002a0c:	9105      	str	r1, [sp, #20]
 8002a0e:	9907      	ldr	r1, [sp, #28]
 8002a10:	449b      	add	fp, r3
 8002a12:	4419      	add	r1, r3
 8002a14:	449a      	add	sl, r3
 8002a16:	9b06      	ldr	r3, [sp, #24]
 8002a18:	9107      	str	r1, [sp, #28]
 8002a1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a1e:	9306      	str	r3, [sp, #24]
 8002a20:	9a04      	ldr	r2, [sp, #16]
 8002a22:	9807      	ldr	r0, [sp, #28]
 8002a24:	edd2 3a00 	vldr	s7, [r2]
 8002a28:	ed90 4a00 	vldr	s8, [r0]
 8002a2c:	eddb 7a00 	vldr	s15, [fp]
 8002a30:	ed9a 3a00 	vldr	s6, [sl]
 8002a34:	edd2 4a01 	vldr	s9, [r2, #4]
 8002a38:	ed90 7a01 	vldr	s14, [r0, #4]
 8002a3c:	ed9b 2a01 	vldr	s4, [fp, #4]
 8002a40:	edda 5a01 	vldr	s11, [sl, #4]
 8002a44:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8002a48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002a4a:	ee73 6a84 	vadd.f32	s13, s7, s8
 8002a4e:	ee34 6a87 	vadd.f32	s12, s9, s14
 8002a52:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8002a56:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8002a5a:	ee33 5a05 	vadd.f32	s10, s6, s10
 8002a5e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8002a62:	ed82 5a00 	vstr	s10, [r2]
 8002a66:	ed9b 5a01 	vldr	s10, [fp, #4]
 8002a6a:	edda 4a01 	vldr	s9, [sl, #4]
 8002a6e:	ee36 5a05 	vadd.f32	s10, s12, s10
 8002a72:	ee72 3a04 	vadd.f32	s7, s4, s8
 8002a76:	ee35 5a24 	vadd.f32	s10, s10, s9
 8002a7a:	ee77 4a67 	vsub.f32	s9, s14, s15
 8002a7e:	ed82 5a01 	vstr	s10, [r2, #4]
 8002a82:	9a05      	ldr	r2, [sp, #20]
 8002a84:	ee34 5a83 	vadd.f32	s10, s9, s6
 8002a88:	edd2 1a00 	vldr	s3, [r2]
 8002a8c:	edd2 2a01 	vldr	s5, [r2, #4]
 8002a90:	9a02      	ldr	r2, [sp, #8]
 8002a92:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8002a96:	ee36 6a42 	vsub.f32	s12, s12, s4
 8002a9a:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8002a9e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8002aa2:	ee65 2a22 	vmul.f32	s5, s10, s5
 8002aa6:	ee25 5a21 	vmul.f32	s10, s10, s3
 8002aaa:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8002aae:	ee35 5a63 	vsub.f32	s10, s10, s7
 8002ab2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ab6:	edcb 2a00 	vstr	s5, [fp]
 8002aba:	ed8b 5a01 	vstr	s10, [fp, #4]
 8002abe:	edd2 3a01 	vldr	s7, [r2, #4]
 8002ac2:	ed92 5a00 	vldr	s10, [r2]
 8002ac6:	9a06      	ldr	r2, [sp, #24]
 8002ac8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8002acc:	ee36 6a65 	vsub.f32	s12, s12, s11
 8002ad0:	ee66 4a85 	vmul.f32	s9, s13, s10
 8002ad4:	ee26 5a05 	vmul.f32	s10, s12, s10
 8002ad8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8002adc:	ee26 6a23 	vmul.f32	s12, s12, s7
 8002ae0:	ee75 6a66 	vsub.f32	s13, s10, s13
 8002ae4:	ee34 6a86 	vadd.f32	s12, s9, s12
 8002ae8:	ee34 4a42 	vsub.f32	s8, s8, s4
 8002aec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002af0:	edc0 6a01 	vstr	s13, [r0, #4]
 8002af4:	ed80 6a00 	vstr	s12, [r0]
 8002af8:	ed92 6a01 	vldr	s12, [r2, #4]
 8002afc:	9803      	ldr	r0, [sp, #12]
 8002afe:	ee77 7a43 	vsub.f32	s15, s14, s6
 8002b02:	ee75 5a84 	vadd.f32	s11, s11, s8
 8002b06:	ed92 7a00 	vldr	s14, [r2]
 8002b0a:	ee65 6a87 	vmul.f32	s13, s11, s14
 8002b0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b12:	ee65 5a86 	vmul.f32	s11, s11, s12
 8002b16:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b1a:	ee77 5a65 	vsub.f32	s11, s14, s11
 8002b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b22:	edca 5a01 	vstr	s11, [sl, #4]
 8002b26:	edca 7a00 	vstr	s15, [sl]
 8002b2a:	6872      	ldr	r2, [r6, #4]
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	2304      	movs	r3, #4
 8002b30:	f000 f97a 	bl	8002e28 <arm_radix8_butterfly_f32>
 8002b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b36:	6872      	ldr	r2, [r6, #4]
 8002b38:	4621      	mov	r1, r4
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	f000 f974 	bl	8002e28 <arm_radix8_butterfly_f32>
 8002b40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002b42:	6872      	ldr	r2, [r6, #4]
 8002b44:	4621      	mov	r1, r4
 8002b46:	2304      	movs	r3, #4
 8002b48:	f000 f96e 	bl	8002e28 <arm_radix8_butterfly_f32>
 8002b4c:	9801      	ldr	r0, [sp, #4]
 8002b4e:	6872      	ldr	r2, [r6, #4]
 8002b50:	4621      	mov	r1, r4
 8002b52:	2304      	movs	r3, #4
 8002b54:	b00f      	add	sp, #60	; 0x3c
 8002b56:	ecbd 8b0a 	vpop	{d8-d12}
 8002b5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b5e:	f000 b963 	b.w	8002e28 <arm_radix8_butterfly_f32>
 8002b62:	bf00      	nop

08002b64 <arm_cfft_f32>:
 8002b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b68:	2a01      	cmp	r2, #1
 8002b6a:	4606      	mov	r6, r0
 8002b6c:	4617      	mov	r7, r2
 8002b6e:	460c      	mov	r4, r1
 8002b70:	4698      	mov	r8, r3
 8002b72:	8805      	ldrh	r5, [r0, #0]
 8002b74:	d054      	beq.n	8002c20 <arm_cfft_f32+0xbc>
 8002b76:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002b7a:	d04c      	beq.n	8002c16 <arm_cfft_f32+0xb2>
 8002b7c:	d916      	bls.n	8002bac <arm_cfft_f32+0x48>
 8002b7e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002b82:	d01a      	beq.n	8002bba <arm_cfft_f32+0x56>
 8002b84:	d95c      	bls.n	8002c40 <arm_cfft_f32+0xdc>
 8002b86:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002b8a:	d044      	beq.n	8002c16 <arm_cfft_f32+0xb2>
 8002b8c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8002b90:	d105      	bne.n	8002b9e <arm_cfft_f32+0x3a>
 8002b92:	4620      	mov	r0, r4
 8002b94:	4629      	mov	r1, r5
 8002b96:	6872      	ldr	r2, [r6, #4]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f000 f945 	bl	8002e28 <arm_radix8_butterfly_f32>
 8002b9e:	f1b8 0f00 	cmp.w	r8, #0
 8002ba2:	d111      	bne.n	8002bc8 <arm_cfft_f32+0x64>
 8002ba4:	2f01      	cmp	r7, #1
 8002ba6:	d016      	beq.n	8002bd6 <arm_cfft_f32+0x72>
 8002ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bac:	2d20      	cmp	r5, #32
 8002bae:	d032      	beq.n	8002c16 <arm_cfft_f32+0xb2>
 8002bb0:	d94a      	bls.n	8002c48 <arm_cfft_f32+0xe4>
 8002bb2:	2d40      	cmp	r5, #64	; 0x40
 8002bb4:	d0ed      	beq.n	8002b92 <arm_cfft_f32+0x2e>
 8002bb6:	2d80      	cmp	r5, #128	; 0x80
 8002bb8:	d1f1      	bne.n	8002b9e <arm_cfft_f32+0x3a>
 8002bba:	4630      	mov	r0, r6
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	f7ff fca1 	bl	8002504 <arm_cfft_radix8by2_f32>
 8002bc2:	f1b8 0f00 	cmp.w	r8, #0
 8002bc6:	d0ed      	beq.n	8002ba4 <arm_cfft_f32+0x40>
 8002bc8:	4620      	mov	r0, r4
 8002bca:	89b1      	ldrh	r1, [r6, #12]
 8002bcc:	68b2      	ldr	r2, [r6, #8]
 8002bce:	f7fd fafb 	bl	80001c8 <arm_bitreversal_32>
 8002bd2:	2f01      	cmp	r7, #1
 8002bd4:	d1e8      	bne.n	8002ba8 <arm_cfft_f32+0x44>
 8002bd6:	ee07 5a90 	vmov	s15, r5
 8002bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002be2:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8002be6:	2d00      	cmp	r5, #0
 8002be8:	d0de      	beq.n	8002ba8 <arm_cfft_f32+0x44>
 8002bea:	f104 0108 	add.w	r1, r4, #8
 8002bee:	2300      	movs	r3, #0
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	429d      	cmp	r5, r3
 8002bf4:	f101 0108 	add.w	r1, r1, #8
 8002bf8:	ed11 7a04 	vldr	s14, [r1, #-16]
 8002bfc:	ed51 7a03 	vldr	s15, [r1, #-12]
 8002c00:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002c04:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8002c08:	ed01 7a04 	vstr	s14, [r1, #-16]
 8002c0c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8002c10:	d1ee      	bne.n	8002bf0 <arm_cfft_f32+0x8c>
 8002c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c16:	4630      	mov	r0, r6
 8002c18:	4621      	mov	r1, r4
 8002c1a:	f7ff fd45 	bl	80026a8 <arm_cfft_radix8by4_f32>
 8002c1e:	e7be      	b.n	8002b9e <arm_cfft_f32+0x3a>
 8002c20:	b1ad      	cbz	r5, 8002c4e <arm_cfft_f32+0xea>
 8002c22:	f101 030c 	add.w	r3, r1, #12
 8002c26:	2200      	movs	r2, #0
 8002c28:	ed53 7a02 	vldr	s15, [r3, #-8]
 8002c2c:	3201      	adds	r2, #1
 8002c2e:	eef1 7a67 	vneg.f32	s15, s15
 8002c32:	4295      	cmp	r5, r2
 8002c34:	ed43 7a02 	vstr	s15, [r3, #-8]
 8002c38:	f103 0308 	add.w	r3, r3, #8
 8002c3c:	d1f4      	bne.n	8002c28 <arm_cfft_f32+0xc4>
 8002c3e:	e79a      	b.n	8002b76 <arm_cfft_f32+0x12>
 8002c40:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8002c44:	d0a5      	beq.n	8002b92 <arm_cfft_f32+0x2e>
 8002c46:	e7aa      	b.n	8002b9e <arm_cfft_f32+0x3a>
 8002c48:	2d10      	cmp	r5, #16
 8002c4a:	d0b6      	beq.n	8002bba <arm_cfft_f32+0x56>
 8002c4c:	e7a7      	b.n	8002b9e <arm_cfft_f32+0x3a>
 8002c4e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002c52:	d894      	bhi.n	8002b7e <arm_cfft_f32+0x1a>
 8002c54:	e7aa      	b.n	8002bac <arm_cfft_f32+0x48>
 8002c56:	bf00      	nop

08002c58 <arm_cmplx_mag_f32>:
 8002c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c5c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8002c60:	b084      	sub	sp, #16
 8002c62:	d07f      	beq.n	8002d64 <arm_cmplx_mag_f32+0x10c>
 8002c64:	2700      	movs	r7, #0
 8002c66:	f100 0420 	add.w	r4, r0, #32
 8002c6a:	f101 0510 	add.w	r5, r1, #16
 8002c6e:	4646      	mov	r6, r8
 8002c70:	e05a      	b.n	8002d28 <arm_cmplx_mag_f32+0xd0>
 8002c72:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8002c76:	eeb4 0a40 	vcmp.f32	s0, s0
 8002c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7e:	f040 80a4 	bne.w	8002dca <arm_cmplx_mag_f32+0x172>
 8002c82:	ed05 0a04 	vstr	s0, [r5, #-16]
 8002c86:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8002c8a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8002c8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c92:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002c96:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002c9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca2:	f2c0 808f 	blt.w	8002dc4 <arm_cmplx_mag_f32+0x16c>
 8002ca6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8002caa:	eeb4 0a40 	vcmp.f32	s0, s0
 8002cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb2:	f040 80af 	bne.w	8002e14 <arm_cmplx_mag_f32+0x1bc>
 8002cb6:	ed05 0a03 	vstr	s0, [r5, #-12]
 8002cba:	ed54 7a04 	vldr	s15, [r4, #-16]
 8002cbe:	ed14 0a03 	vldr	s0, [r4, #-12]
 8002cc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002cc6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002cca:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002cce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd6:	db72      	blt.n	8002dbe <arm_cmplx_mag_f32+0x166>
 8002cd8:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8002cdc:	eeb4 0a40 	vcmp.f32	s0, s0
 8002ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce4:	f040 808c 	bne.w	8002e00 <arm_cmplx_mag_f32+0x1a8>
 8002ce8:	ed05 0a02 	vstr	s0, [r5, #-8]
 8002cec:	ed54 7a02 	vldr	s15, [r4, #-8]
 8002cf0:	ed14 0a01 	vldr	s0, [r4, #-4]
 8002cf4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002cf8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002cfc:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002d00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d08:	db20      	blt.n	8002d4c <arm_cmplx_mag_f32+0xf4>
 8002d0a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8002d0e:	eeb4 0a40 	vcmp.f32	s0, s0
 8002d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d16:	d169      	bne.n	8002dec <arm_cmplx_mag_f32+0x194>
 8002d18:	3e01      	subs	r6, #1
 8002d1a:	ed05 0a01 	vstr	s0, [r5, #-4]
 8002d1e:	f104 0420 	add.w	r4, r4, #32
 8002d22:	f105 0510 	add.w	r5, r5, #16
 8002d26:	d019      	beq.n	8002d5c <arm_cmplx_mag_f32+0x104>
 8002d28:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8002d2c:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8002d30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002d34:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002d38:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002d3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d44:	da95      	bge.n	8002c72 <arm_cmplx_mag_f32+0x1a>
 8002d46:	f845 7c10 	str.w	r7, [r5, #-16]
 8002d4a:	e79c      	b.n	8002c86 <arm_cmplx_mag_f32+0x2e>
 8002d4c:	3e01      	subs	r6, #1
 8002d4e:	f845 7c04 	str.w	r7, [r5, #-4]
 8002d52:	f104 0420 	add.w	r4, r4, #32
 8002d56:	f105 0510 	add.w	r5, r5, #16
 8002d5a:	d1e5      	bne.n	8002d28 <arm_cmplx_mag_f32+0xd0>
 8002d5c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8002d60:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8002d64:	f012 0503 	ands.w	r5, r2, #3
 8002d68:	d026      	beq.n	8002db8 <arm_cmplx_mag_f32+0x160>
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	f100 0408 	add.w	r4, r0, #8
 8002d70:	e00c      	b.n	8002d8c <arm_cmplx_mag_f32+0x134>
 8002d72:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8002d76:	eeb4 0a40 	vcmp.f32	s0, s0
 8002d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7e:	d12e      	bne.n	8002dde <arm_cmplx_mag_f32+0x186>
 8002d80:	3d01      	subs	r5, #1
 8002d82:	ed01 0a01 	vstr	s0, [r1, #-4]
 8002d86:	f104 0408 	add.w	r4, r4, #8
 8002d8a:	d015      	beq.n	8002db8 <arm_cmplx_mag_f32+0x160>
 8002d8c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8002d90:	ed14 0a01 	vldr	s0, [r4, #-4]
 8002d94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002d98:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002d9c:	3104      	adds	r1, #4
 8002d9e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002da2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	dae2      	bge.n	8002d72 <arm_cmplx_mag_f32+0x11a>
 8002dac:	3d01      	subs	r5, #1
 8002dae:	f841 6c04 	str.w	r6, [r1, #-4]
 8002db2:	f104 0408 	add.w	r4, r4, #8
 8002db6:	d1e9      	bne.n	8002d8c <arm_cmplx_mag_f32+0x134>
 8002db8:	b004      	add	sp, #16
 8002dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dbe:	f845 7c08 	str.w	r7, [r5, #-8]
 8002dc2:	e793      	b.n	8002cec <arm_cmplx_mag_f32+0x94>
 8002dc4:	f845 7c0c 	str.w	r7, [r5, #-12]
 8002dc8:	e777      	b.n	8002cba <arm_cmplx_mag_f32+0x62>
 8002dca:	eeb0 0a67 	vmov.f32	s0, s15
 8002dce:	9203      	str	r2, [sp, #12]
 8002dd0:	9102      	str	r1, [sp, #8]
 8002dd2:	9001      	str	r0, [sp, #4]
 8002dd4:	f000 fb3c 	bl	8003450 <sqrtf>
 8002dd8:	a801      	add	r0, sp, #4
 8002dda:	c807      	ldmia	r0, {r0, r1, r2}
 8002ddc:	e751      	b.n	8002c82 <arm_cmplx_mag_f32+0x2a>
 8002dde:	eeb0 0a67 	vmov.f32	s0, s15
 8002de2:	9101      	str	r1, [sp, #4]
 8002de4:	f000 fb34 	bl	8003450 <sqrtf>
 8002de8:	9901      	ldr	r1, [sp, #4]
 8002dea:	e7c9      	b.n	8002d80 <arm_cmplx_mag_f32+0x128>
 8002dec:	eeb0 0a67 	vmov.f32	s0, s15
 8002df0:	9203      	str	r2, [sp, #12]
 8002df2:	9102      	str	r1, [sp, #8]
 8002df4:	9001      	str	r0, [sp, #4]
 8002df6:	f000 fb2b 	bl	8003450 <sqrtf>
 8002dfa:	a801      	add	r0, sp, #4
 8002dfc:	c807      	ldmia	r0, {r0, r1, r2}
 8002dfe:	e78b      	b.n	8002d18 <arm_cmplx_mag_f32+0xc0>
 8002e00:	eeb0 0a67 	vmov.f32	s0, s15
 8002e04:	9203      	str	r2, [sp, #12]
 8002e06:	9102      	str	r1, [sp, #8]
 8002e08:	9001      	str	r0, [sp, #4]
 8002e0a:	f000 fb21 	bl	8003450 <sqrtf>
 8002e0e:	a801      	add	r0, sp, #4
 8002e10:	c807      	ldmia	r0, {r0, r1, r2}
 8002e12:	e769      	b.n	8002ce8 <arm_cmplx_mag_f32+0x90>
 8002e14:	eeb0 0a67 	vmov.f32	s0, s15
 8002e18:	9203      	str	r2, [sp, #12]
 8002e1a:	9102      	str	r1, [sp, #8]
 8002e1c:	9001      	str	r0, [sp, #4]
 8002e1e:	f000 fb17 	bl	8003450 <sqrtf>
 8002e22:	a801      	add	r0, sp, #4
 8002e24:	c807      	ldmia	r0, {r0, r1, r2}
 8002e26:	e746      	b.n	8002cb6 <arm_cmplx_mag_f32+0x5e>

08002e28 <arm_radix8_butterfly_f32>:
 8002e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2c:	ed2d 8b10 	vpush	{d8-d15}
 8002e30:	b09d      	sub	sp, #116	; 0x74
 8002e32:	461c      	mov	r4, r3
 8002e34:	ed9f bac8 	vldr	s22, [pc, #800]	; 8003158 <arm_radix8_butterfly_f32+0x330>
 8002e38:	921a      	str	r2, [sp, #104]	; 0x68
 8002e3a:	1d03      	adds	r3, r0, #4
 8002e3c:	4682      	mov	sl, r0
 8002e3e:	4689      	mov	r9, r1
 8002e40:	468b      	mov	fp, r1
 8002e42:	931b      	str	r3, [sp, #108]	; 0x6c
 8002e44:	9400      	str	r4, [sp, #0]
 8002e46:	469e      	mov	lr, r3
 8002e48:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8002e4c:	005a      	lsls	r2, r3, #1
 8002e4e:	18d6      	adds	r6, r2, r3
 8002e50:	18f5      	adds	r5, r6, r3
 8002e52:	9203      	str	r2, [sp, #12]
 8002e54:	195a      	adds	r2, r3, r5
 8002e56:	18d0      	adds	r0, r2, r3
 8002e58:	00df      	lsls	r7, r3, #3
 8002e5a:	1819      	adds	r1, r3, r0
 8002e5c:	463c      	mov	r4, r7
 8002e5e:	9701      	str	r7, [sp, #4]
 8002e60:	4457      	add	r7, sl
 8002e62:	930c      	str	r3, [sp, #48]	; 0x30
 8002e64:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8002e6e:	eb07 0c04 	add.w	ip, r7, r4
 8002e72:	9c00      	ldr	r4, [sp, #0]
 8002e74:	9302      	str	r3, [sp, #8]
 8002e76:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8002e7a:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8002e7e:	3204      	adds	r2, #4
 8002e80:	3104      	adds	r1, #4
 8002e82:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8002e86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e8a:	f04f 0800 	mov.w	r8, #0
 8002e8e:	eddc 7a00 	vldr	s15, [ip]
 8002e92:	edd7 6a00 	vldr	s13, [r7]
 8002e96:	edd6 3a00 	vldr	s7, [r6]
 8002e9a:	ed5e aa01 	vldr	s21, [lr, #-4]
 8002e9e:	edd5 4a00 	vldr	s9, [r5]
 8002ea2:	ed90 2a00 	vldr	s4, [r0]
 8002ea6:	ed12 7a01 	vldr	s14, [r2, #-4]
 8002eaa:	ed51 0a01 	vldr	s1, [r1, #-4]
 8002eae:	ee77 8a82 	vadd.f32	s17, s15, s4
 8002eb2:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8002eb6:	ee76 1a87 	vadd.f32	s3, s13, s14
 8002eba:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8002ebe:	ee31 6a84 	vadd.f32	s12, s3, s8
 8002ec2:	ee33 5a28 	vadd.f32	s10, s6, s17
 8002ec6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002eca:	ee75 6a06 	vadd.f32	s13, s10, s12
 8002ece:	ee35 5a46 	vsub.f32	s10, s10, s12
 8002ed2:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8002ed6:	ed85 5a00 	vstr	s10, [r5]
 8002eda:	ed96 1a01 	vldr	s2, [r6, #4]
 8002ede:	edd7 5a01 	vldr	s11, [r7, #4]
 8002ee2:	ed92 aa00 	vldr	s20, [r2]
 8002ee6:	ed91 6a00 	vldr	s12, [r1]
 8002eea:	ed9e 9a00 	vldr	s18, [lr]
 8002eee:	ed95 5a01 	vldr	s10, [r5, #4]
 8002ef2:	eddc 6a01 	vldr	s13, [ip, #4]
 8002ef6:	edd0 9a01 	vldr	s19, [r0, #4]
 8002efa:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8002efe:	ee71 2a46 	vsub.f32	s5, s2, s12
 8002f02:	ee75 3aca 	vsub.f32	s7, s11, s20
 8002f06:	ee37 0a60 	vsub.f32	s0, s14, s1
 8002f0a:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8002f0e:	ee37 7a20 	vadd.f32	s14, s14, s1
 8002f12:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8002f16:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8002f1a:	ee79 3a05 	vadd.f32	s7, s18, s10
 8002f1e:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8002f22:	ee39 5a45 	vsub.f32	s10, s18, s10
 8002f26:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8002f2a:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8002f2e:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8002f32:	ee31 6a06 	vadd.f32	s12, s2, s12
 8002f36:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8002f3a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8002f3e:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8002f42:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8002f46:	ee33 3a68 	vsub.f32	s6, s6, s17
 8002f4a:	ee36 0a88 	vadd.f32	s0, s13, s16
 8002f4e:	ee75 8a86 	vadd.f32	s17, s11, s12
 8002f52:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8002f56:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8002f5a:	ee75 6a62 	vsub.f32	s13, s10, s5
 8002f5e:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8002f62:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8002f66:	ee33 1a89 	vadd.f32	s2, s7, s18
 8002f6a:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8002f6e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8002f72:	ee75 4a22 	vadd.f32	s9, s10, s5
 8002f76:	ee32 5a27 	vadd.f32	s10, s4, s15
 8002f7a:	ee72 7a67 	vsub.f32	s15, s4, s15
 8002f7e:	ee33 8a06 	vadd.f32	s16, s6, s12
 8002f82:	ee75 2a87 	vadd.f32	s5, s11, s14
 8002f86:	ee31 9a28 	vadd.f32	s18, s2, s17
 8002f8a:	ee33 6a46 	vsub.f32	s12, s6, s12
 8002f8e:	ee74 0a61 	vsub.f32	s1, s8, s3
 8002f92:	ee33 2a80 	vadd.f32	s4, s7, s0
 8002f96:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8002f9a:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8002f9e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8002fa2:	ee31 1a68 	vsub.f32	s2, s2, s17
 8002fa6:	ee34 4a21 	vadd.f32	s8, s8, s3
 8002faa:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8002fae:	ee74 4a85 	vadd.f32	s9, s9, s10
 8002fb2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002fb6:	44d8      	add	r8, fp
 8002fb8:	45c1      	cmp	r9, r8
 8002fba:	ed8e 9a00 	vstr	s18, [lr]
 8002fbe:	ed85 1a01 	vstr	s2, [r5, #4]
 8002fc2:	449e      	add	lr, r3
 8002fc4:	ed8c 8a00 	vstr	s16, [ip]
 8002fc8:	441d      	add	r5, r3
 8002fca:	ed80 6a00 	vstr	s12, [r0]
 8002fce:	edcc 0a01 	vstr	s1, [ip, #4]
 8002fd2:	ed80 4a01 	vstr	s8, [r0, #4]
 8002fd6:	449c      	add	ip, r3
 8002fd8:	ed87 2a00 	vstr	s4, [r7]
 8002fdc:	4418      	add	r0, r3
 8002fde:	ed41 3a01 	vstr	s7, [r1, #-4]
 8002fe2:	ed42 2a01 	vstr	s5, [r2, #-4]
 8002fe6:	ed86 7a00 	vstr	s14, [r6]
 8002fea:	ed87 3a01 	vstr	s6, [r7, #4]
 8002fee:	edc1 4a00 	vstr	s9, [r1]
 8002ff2:	441f      	add	r7, r3
 8002ff4:	edc2 5a00 	vstr	s11, [r2]
 8002ff8:	4419      	add	r1, r3
 8002ffa:	edc6 6a01 	vstr	s13, [r6, #4]
 8002ffe:	441a      	add	r2, r3
 8003000:	441e      	add	r6, r3
 8003002:	f63f af44 	bhi.w	8002e8e <arm_radix8_butterfly_f32+0x66>
 8003006:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003008:	2907      	cmp	r1, #7
 800300a:	4620      	mov	r0, r4
 800300c:	f240 81e9 	bls.w	80033e2 <arm_radix8_butterfly_f32+0x5ba>
 8003010:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8003014:	193e      	adds	r6, r7, r4
 8003016:	1935      	adds	r5, r6, r4
 8003018:	9c03      	ldr	r4, [sp, #12]
 800301a:	9000      	str	r0, [sp, #0]
 800301c:	4622      	mov	r2, r4
 800301e:	3201      	adds	r2, #1
 8003020:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003024:	9900      	ldr	r1, [sp, #0]
 8003026:	1828      	adds	r0, r5, r0
 8003028:	eb00 0e01 	add.w	lr, r0, r1
 800302c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800302e:	440a      	add	r2, r1
 8003030:	eb04 0c01 	add.w	ip, r4, r1
 8003034:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8003038:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800303c:	9a00      	ldr	r2, [sp, #0]
 800303e:	940f      	str	r4, [sp, #60]	; 0x3c
 8003040:	00ed      	lsls	r5, r5, #3
 8003042:	9511      	str	r5, [sp, #68]	; 0x44
 8003044:	00d5      	lsls	r5, r2, #3
 8003046:	950d      	str	r5, [sp, #52]	; 0x34
 8003048:	9d01      	ldr	r5, [sp, #4]
 800304a:	3508      	adds	r5, #8
 800304c:	9516      	str	r5, [sp, #88]	; 0x58
 800304e:	9d02      	ldr	r5, [sp, #8]
 8003050:	3508      	adds	r5, #8
 8003052:	0114      	lsls	r4, r2, #4
 8003054:	9517      	str	r5, [sp, #92]	; 0x5c
 8003056:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003058:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800305a:	940e      	str	r4, [sp, #56]	; 0x38
 800305c:	00c0      	lsls	r0, r0, #3
 800305e:	9010      	str	r0, [sp, #64]	; 0x40
 8003060:	18aa      	adds	r2, r5, r2
 8003062:	9207      	str	r2, [sp, #28]
 8003064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003066:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003068:	18aa      	adds	r2, r5, r2
 800306a:	9208      	str	r2, [sp, #32]
 800306c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800306e:	18aa      	adds	r2, r5, r2
 8003070:	9209      	str	r2, [sp, #36]	; 0x24
 8003072:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003076:	f10e 0204 	add.w	r2, lr, #4
 800307a:	920a      	str	r2, [sp, #40]	; 0x28
 800307c:	00c9      	lsls	r1, r1, #3
 800307e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003080:	310c      	adds	r1, #12
 8003082:	00f6      	lsls	r6, r6, #3
 8003084:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8003088:	9114      	str	r1, [sp, #80]	; 0x50
 800308a:	18a9      	adds	r1, r5, r2
 800308c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800308e:	9612      	str	r6, [sp, #72]	; 0x48
 8003090:	00ff      	lsls	r7, r7, #3
 8003092:	19ae      	adds	r6, r5, r6
 8003094:	3008      	adds	r0, #8
 8003096:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800309a:	9606      	str	r6, [sp, #24]
 800309c:	9019      	str	r0, [sp, #100]	; 0x64
 800309e:	18aa      	adds	r2, r5, r2
 80030a0:	0164      	lsls	r4, r4, #5
 80030a2:	19ee      	adds	r6, r5, r7
 80030a4:	f10c 000c 	add.w	r0, ip, #12
 80030a8:	9713      	str	r7, [sp, #76]	; 0x4c
 80030aa:	9604      	str	r6, [sp, #16]
 80030ac:	9015      	str	r0, [sp, #84]	; 0x54
 80030ae:	9103      	str	r1, [sp, #12]
 80030b0:	9205      	str	r2, [sp, #20]
 80030b2:	f104 0208 	add.w	r2, r4, #8
 80030b6:	9218      	str	r2, [sp, #96]	; 0x60
 80030b8:	f04f 0801 	mov.w	r8, #1
 80030bc:	2200      	movs	r2, #0
 80030be:	f102 0108 	add.w	r1, r2, #8
 80030c2:	460f      	mov	r7, r1
 80030c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80030c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80030c8:	188e      	adds	r6, r1, r2
 80030ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 80030cc:	188d      	adds	r5, r1, r2
 80030ce:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80030d0:	188c      	adds	r4, r1, r2
 80030d2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80030d4:	1888      	adds	r0, r1, r2
 80030d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80030d8:	eb01 0c02 	add.w	ip, r1, r2
 80030dc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80030de:	440a      	add	r2, r1
 80030e0:	9903      	ldr	r1, [sp, #12]
 80030e2:	edd1 fa00 	vldr	s31, [r1]
 80030e6:	9905      	ldr	r1, [sp, #20]
 80030e8:	ed91 fa00 	vldr	s30, [r1]
 80030ec:	9904      	ldr	r1, [sp, #16]
 80030ee:	edd1 ea00 	vldr	s29, [r1]
 80030f2:	9906      	ldr	r1, [sp, #24]
 80030f4:	ed91 ea00 	vldr	s28, [r1]
 80030f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80030fa:	edd1 da00 	vldr	s27, [r1]
 80030fe:	9908      	ldr	r1, [sp, #32]
 8003100:	ed91 da00 	vldr	s26, [r1]
 8003104:	9907      	ldr	r1, [sp, #28]
 8003106:	edd1 ca00 	vldr	s25, [r1]
 800310a:	9903      	ldr	r1, [sp, #12]
 800310c:	ed91 ca01 	vldr	s24, [r1, #4]
 8003110:	9905      	ldr	r1, [sp, #20]
 8003112:	edd1 ba01 	vldr	s23, [r1, #4]
 8003116:	9904      	ldr	r1, [sp, #16]
 8003118:	edd1 aa01 	vldr	s21, [r1, #4]
 800311c:	9906      	ldr	r1, [sp, #24]
 800311e:	ed91 aa01 	vldr	s20, [r1, #4]
 8003122:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003124:	edd1 7a01 	vldr	s15, [r1, #4]
 8003128:	9908      	ldr	r1, [sp, #32]
 800312a:	edcd 7a00 	vstr	s15, [sp]
 800312e:	edd1 7a01 	vldr	s15, [r1, #4]
 8003132:	9907      	ldr	r1, [sp, #28]
 8003134:	edcd 7a01 	vstr	s15, [sp, #4]
 8003138:	edd1 7a01 	vldr	s15, [r1, #4]
 800313c:	eb0a 0e07 	add.w	lr, sl, r7
 8003140:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003142:	edcd 7a02 	vstr	s15, [sp, #8]
 8003146:	eb0c 010a 	add.w	r1, ip, sl
 800314a:	4456      	add	r6, sl
 800314c:	4455      	add	r5, sl
 800314e:	4454      	add	r4, sl
 8003150:	4450      	add	r0, sl
 8003152:	4452      	add	r2, sl
 8003154:	46c4      	mov	ip, r8
 8003156:	e001      	b.n	800315c <arm_radix8_butterfly_f32+0x334>
 8003158:	3f3504f3 	.word	0x3f3504f3
 800315c:	ed96 5a00 	vldr	s10, [r6]
 8003160:	ed52 9a01 	vldr	s19, [r2, #-4]
 8003164:	ed11 6a01 	vldr	s12, [r1, #-4]
 8003168:	edd0 7a00 	vldr	s15, [r0]
 800316c:	ed17 7a01 	vldr	s14, [r7, #-4]
 8003170:	edde 3a00 	vldr	s7, [lr]
 8003174:	ed94 3a00 	vldr	s6, [r4]
 8003178:	ed95 2a00 	vldr	s4, [r5]
 800317c:	ed9e 0a01 	vldr	s0, [lr, #4]
 8003180:	ee33 8a85 	vadd.f32	s16, s7, s10
 8003184:	ee32 1a06 	vadd.f32	s2, s4, s12
 8003188:	ee33 4a29 	vadd.f32	s8, s6, s19
 800318c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8003190:	ee78 1a04 	vadd.f32	s3, s16, s8
 8003194:	ee71 6a24 	vadd.f32	s13, s2, s9
 8003198:	ee32 2a46 	vsub.f32	s4, s4, s12
 800319c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80031a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031a4:	ed8e 6a00 	vstr	s12, [lr]
 80031a8:	edd0 8a01 	vldr	s17, [r0, #4]
 80031ac:	ed95 9a01 	vldr	s18, [r5, #4]
 80031b0:	edd1 2a00 	vldr	s5, [r1]
 80031b4:	ed97 7a00 	vldr	s14, [r7]
 80031b8:	edd4 0a01 	vldr	s1, [r4, #4]
 80031bc:	ed96 6a01 	vldr	s12, [r6, #4]
 80031c0:	edd2 5a00 	vldr	s11, [r2]
 80031c4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80031c8:	ee33 3a69 	vsub.f32	s6, s6, s19
 80031cc:	ee39 5a62 	vsub.f32	s10, s18, s5
 80031d0:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80031d4:	ee38 4a44 	vsub.f32	s8, s16, s8
 80031d8:	ee38 7a87 	vadd.f32	s14, s17, s14
 80031dc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80031e0:	ee79 2a22 	vadd.f32	s5, s18, s5
 80031e4:	ee75 8a69 	vsub.f32	s17, s10, s19
 80031e8:	ee32 9a27 	vadd.f32	s18, s4, s15
 80031ec:	ee35 5a29 	vadd.f32	s10, s10, s19
 80031f0:	ee72 7a67 	vsub.f32	s15, s4, s15
 80031f4:	ee30 2a06 	vadd.f32	s4, s0, s12
 80031f8:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80031fc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8003200:	ee32 9a08 	vadd.f32	s18, s4, s16
 8003204:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8003208:	ee32 2a48 	vsub.f32	s4, s4, s16
 800320c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8003210:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8003214:	ee32 1a87 	vadd.f32	s2, s5, s14
 8003218:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800321c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8003220:	ee30 6a46 	vsub.f32	s12, s0, s12
 8003224:	ee73 0a29 	vadd.f32	s1, s6, s19
 8003228:	ee36 0a28 	vadd.f32	s0, s12, s17
 800322c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8003230:	ee32 7a64 	vsub.f32	s14, s4, s9
 8003234:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8003238:	ee36 6a68 	vsub.f32	s12, s12, s17
 800323c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8003240:	ee75 8a85 	vadd.f32	s17, s11, s10
 8003244:	ee74 3a22 	vadd.f32	s7, s8, s5
 8003248:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800324c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8003250:	ee79 1a41 	vsub.f32	s3, s18, s2
 8003254:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8003258:	ee76 5a43 	vsub.f32	s11, s12, s6
 800325c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8003260:	ee72 4a24 	vadd.f32	s9, s4, s9
 8003264:	ee30 4a60 	vsub.f32	s8, s0, s1
 8003268:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800326c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003270:	ee77 9a85 	vadd.f32	s19, s15, s10
 8003274:	ee36 6a03 	vadd.f32	s12, s12, s6
 8003278:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800327c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8003280:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8003284:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8003288:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800328c:	ee39 1a01 	vadd.f32	s2, s18, s2
 8003290:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8003294:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8003298:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800329c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80032a0:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80032a4:	ee35 3a03 	vadd.f32	s6, s10, s6
 80032a8:	ee72 6a66 	vsub.f32	s13, s4, s13
 80032ac:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80032b0:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80032b4:	ed9d 4a02 	vldr	s8, [sp, #8]
 80032b8:	ed8e 1a01 	vstr	s2, [lr, #4]
 80032bc:	ee77 3a63 	vsub.f32	s7, s14, s7
 80032c0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80032c4:	ed9d 7a01 	vldr	s14, [sp, #4]
 80032c8:	ed86 3a00 	vstr	s6, [r6]
 80032cc:	ee30 9a89 	vadd.f32	s18, s1, s18
 80032d0:	ee32 2a05 	vadd.f32	s4, s4, s10
 80032d4:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80032d8:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80032dc:	ee67 2a22 	vmul.f32	s5, s14, s5
 80032e0:	ee64 1a00 	vmul.f32	s3, s8, s0
 80032e4:	ee27 7a24 	vmul.f32	s14, s14, s9
 80032e8:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80032ec:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80032f0:	ee64 8a28 	vmul.f32	s17, s8, s17
 80032f4:	ed9d 4a00 	vldr	s8, [sp]
 80032f8:	edc6 6a01 	vstr	s13, [r6, #4]
 80032fc:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8003300:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8003304:	ee64 9a29 	vmul.f32	s19, s8, s19
 8003308:	ee24 4a25 	vmul.f32	s8, s8, s11
 800330c:	ee30 7a87 	vadd.f32	s14, s1, s14
 8003310:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003314:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8003318:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800331c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8003320:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8003324:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8003328:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800332c:	ee75 1a21 	vadd.f32	s3, s10, s3
 8003330:	ee30 0a68 	vsub.f32	s0, s0, s17
 8003334:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8003338:	ee70 0a84 	vadd.f32	s1, s1, s8
 800333c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003340:	44dc      	add	ip, fp
 8003342:	45e1      	cmp	r9, ip
 8003344:	ed84 9a00 	vstr	s18, [r4]
 8003348:	edc4 3a01 	vstr	s7, [r4, #4]
 800334c:	449e      	add	lr, r3
 800334e:	ed02 7a01 	vstr	s14, [r2, #-4]
 8003352:	edc2 2a00 	vstr	s5, [r2]
 8003356:	441e      	add	r6, r3
 8003358:	ed85 2a00 	vstr	s4, [r5]
 800335c:	ed85 8a01 	vstr	s16, [r5, #4]
 8003360:	441c      	add	r4, r3
 8003362:	ed47 1a01 	vstr	s3, [r7, #-4]
 8003366:	ed87 0a00 	vstr	s0, [r7]
 800336a:	441a      	add	r2, r3
 800336c:	ed41 4a01 	vstr	s9, [r1, #-4]
 8003370:	edc1 9a00 	vstr	s19, [r1]
 8003374:	441d      	add	r5, r3
 8003376:	edc0 0a00 	vstr	s1, [r0]
 800337a:	441f      	add	r7, r3
 800337c:	ed80 6a01 	vstr	s12, [r0, #4]
 8003380:	4419      	add	r1, r3
 8003382:	4418      	add	r0, r3
 8003384:	f63f aeea 	bhi.w	800315c <arm_radix8_butterfly_f32+0x334>
 8003388:	9a03      	ldr	r2, [sp, #12]
 800338a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800338c:	440a      	add	r2, r1
 800338e:	9203      	str	r2, [sp, #12]
 8003390:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003392:	9a05      	ldr	r2, [sp, #20]
 8003394:	440a      	add	r2, r1
 8003396:	9205      	str	r2, [sp, #20]
 8003398:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800339a:	9a04      	ldr	r2, [sp, #16]
 800339c:	440a      	add	r2, r1
 800339e:	9204      	str	r2, [sp, #16]
 80033a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80033a2:	9a06      	ldr	r2, [sp, #24]
 80033a4:	440a      	add	r2, r1
 80033a6:	9206      	str	r2, [sp, #24]
 80033a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80033aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033ac:	440a      	add	r2, r1
 80033ae:	9209      	str	r2, [sp, #36]	; 0x24
 80033b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80033b2:	9a08      	ldr	r2, [sp, #32]
 80033b4:	440a      	add	r2, r1
 80033b6:	9208      	str	r2, [sp, #32]
 80033b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80033ba:	9a07      	ldr	r2, [sp, #28]
 80033bc:	440a      	add	r2, r1
 80033be:	9207      	str	r2, [sp, #28]
 80033c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80033c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033c4:	f108 0801 	add.w	r8, r8, #1
 80033c8:	3208      	adds	r2, #8
 80033ca:	4588      	cmp	r8, r1
 80033cc:	920a      	str	r2, [sp, #40]	; 0x28
 80033ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80033d0:	f47f ae75 	bne.w	80030be <arm_radix8_butterfly_f32+0x296>
 80033d4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	46c3      	mov	fp, r8
 80033dc:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 80033e0:	e532      	b.n	8002e48 <arm_radix8_butterfly_f32+0x20>
 80033e2:	b01d      	add	sp, #116	; 0x74
 80033e4:	ecbd 8b10 	vpop	{d8-d15}
 80033e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080033ec <__errno>:
 80033ec:	4b01      	ldr	r3, [pc, #4]	; (80033f4 <__errno+0x8>)
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	2000000c 	.word	0x2000000c

080033f8 <__libc_init_array>:
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	4d0d      	ldr	r5, [pc, #52]	; (8003430 <__libc_init_array+0x38>)
 80033fc:	4c0d      	ldr	r4, [pc, #52]	; (8003434 <__libc_init_array+0x3c>)
 80033fe:	1b64      	subs	r4, r4, r5
 8003400:	10a4      	asrs	r4, r4, #2
 8003402:	2600      	movs	r6, #0
 8003404:	42a6      	cmp	r6, r4
 8003406:	d109      	bne.n	800341c <__libc_init_array+0x24>
 8003408:	4d0b      	ldr	r5, [pc, #44]	; (8003438 <__libc_init_array+0x40>)
 800340a:	4c0c      	ldr	r4, [pc, #48]	; (800343c <__libc_init_array+0x44>)
 800340c:	f000 f842 	bl	8003494 <_init>
 8003410:	1b64      	subs	r4, r4, r5
 8003412:	10a4      	asrs	r4, r4, #2
 8003414:	2600      	movs	r6, #0
 8003416:	42a6      	cmp	r6, r4
 8003418:	d105      	bne.n	8003426 <__libc_init_array+0x2e>
 800341a:	bd70      	pop	{r4, r5, r6, pc}
 800341c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003420:	4798      	blx	r3
 8003422:	3601      	adds	r6, #1
 8003424:	e7ee      	b.n	8003404 <__libc_init_array+0xc>
 8003426:	f855 3b04 	ldr.w	r3, [r5], #4
 800342a:	4798      	blx	r3
 800342c:	3601      	adds	r6, #1
 800342e:	e7f2      	b.n	8003416 <__libc_init_array+0x1e>
 8003430:	0801691c 	.word	0x0801691c
 8003434:	0801691c 	.word	0x0801691c
 8003438:	0801691c 	.word	0x0801691c
 800343c:	08016920 	.word	0x08016920

08003440 <memset>:
 8003440:	4402      	add	r2, r0
 8003442:	4603      	mov	r3, r0
 8003444:	4293      	cmp	r3, r2
 8003446:	d100      	bne.n	800344a <memset+0xa>
 8003448:	4770      	bx	lr
 800344a:	f803 1b01 	strb.w	r1, [r3], #1
 800344e:	e7f9      	b.n	8003444 <memset+0x4>

08003450 <sqrtf>:
 8003450:	b508      	push	{r3, lr}
 8003452:	ed2d 8b02 	vpush	{d8}
 8003456:	eeb0 8a40 	vmov.f32	s16, s0
 800345a:	f000 f817 	bl	800348c <__ieee754_sqrtf>
 800345e:	eeb4 8a48 	vcmp.f32	s16, s16
 8003462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003466:	d60c      	bvs.n	8003482 <sqrtf+0x32>
 8003468:	eddf 8a07 	vldr	s17, [pc, #28]	; 8003488 <sqrtf+0x38>
 800346c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003474:	d505      	bpl.n	8003482 <sqrtf+0x32>
 8003476:	f7ff ffb9 	bl	80033ec <__errno>
 800347a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800347e:	2321      	movs	r3, #33	; 0x21
 8003480:	6003      	str	r3, [r0, #0]
 8003482:	ecbd 8b02 	vpop	{d8}
 8003486:	bd08      	pop	{r3, pc}
 8003488:	00000000 	.word	0x00000000

0800348c <__ieee754_sqrtf>:
 800348c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8003490:	4770      	bx	lr
	...

08003494 <_init>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	bf00      	nop
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr

080034a0 <_fini>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	bf00      	nop
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr
